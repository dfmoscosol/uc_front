import {
  ENTERED,
  ENTERING,
  EXITED,
  EXITING,
  Fade_default,
  OverlayTrigger_default,
  Overlay_default,
  PopoverBody_default,
  PopoverHeader_default,
  Popover_default,
  TransitionWrapper_default,
  addEventListener_default,
  canUseDOM_default,
  contains,
  createWithBsPrefix,
  css_default,
  hasClass,
  listen_default,
  mergeOptionsWithPopperConfig,
  ownerDocument,
  removeEventListener_default,
  require_browser,
  require_prop_types,
  require_warning,
  transitionEnd,
  transitionEndListener,
  triggerBrowserReflow,
  useCallbackRef,
  useClickOutside_default,
  useCommittedRef_default,
  useEventCallback,
  useMergedRefs_default,
  useMounted,
  usePopper_default,
  useTimeout,
  useUncontrolled,
  useUncontrolledProp,
  useWaitForDOMRef,
  useWillUnmount,
  useWindow
} from "./chunk-6DHHOCHY.js";
import "./chunk-CFKUM4I4.js";
import "./chunk-RNET26EM.js";
import "./chunk-JYJ42PL5.js";
import {
  Tooltip_default
} from "./chunk-X5GL5N7N.js";
import {
  DEFAULT_BREAKPOINTS,
  ThemeProvider_default,
  require_classnames,
  require_jsx_runtime,
  useBootstrapBreakpoints,
  useBootstrapPrefix,
  useIsRTL
} from "./chunk-MFYRHTLE.js";
import {
  require_react_dom
} from "./chunk-ITQI7VZ6.js";
import {
  require_react
} from "./chunk-6VK5MRUS.js";
import {
  __commonJS,
  __objRest,
  __spreadProps,
  __spreadValues,
  __toESM
} from "./chunk-CE2RVVJG.js";

// node_modules/prop-types-extra/lib/utils/createChainableTypeChecker.js
var require_createChainableTypeChecker = __commonJS({
  "node_modules/prop-types-extra/lib/utils/createChainableTypeChecker.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createChainableTypeChecker;
    function createChainableTypeChecker(validate) {
      function checkType(isRequired, props, propName, componentName, location, propFullName) {
        var componentNameSafe = componentName || "<<anonymous>>";
        var propFullNameSafe = propFullName || propName;
        if (props[propName] == null) {
          if (isRequired) {
            return new Error("Required " + location + " `" + propFullNameSafe + "` was not specified " + ("in `" + componentNameSafe + "`."));
          }
          return null;
        }
        for (var _len = arguments.length, args = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
          args[_key - 6] = arguments[_key];
        }
        return validate.apply(void 0, [props, propName, componentNameSafe, location, propFullNameSafe].concat(args));
      }
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }
    module.exports = exports["default"];
  }
});

// node_modules/prop-types-extra/lib/all.js
var require_all = __commonJS({
  "node_modules/prop-types-extra/lib/all.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = all2;
    var _createChainableTypeChecker = require_createChainableTypeChecker();
    var _createChainableTypeChecker2 = _interopRequireDefault(_createChainableTypeChecker);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function all2() {
      for (var _len = arguments.length, validators = Array(_len), _key = 0; _key < _len; _key++) {
        validators[_key] = arguments[_key];
      }
      function allPropTypes() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        var error = null;
        validators.forEach(function(validator) {
          if (error != null) {
            return;
          }
          var result = validator.apply(void 0, args);
          if (result != null) {
            error = result;
          }
        });
        return error;
      }
      return (0, _createChainableTypeChecker2.default)(allPropTypes);
    }
    module.exports = exports["default"];
  }
});

// node_modules/react-bootstrap/esm/Accordion.js
var import_classnames7 = __toESM(require_classnames());
var React9 = __toESM(require_react());
var import_react6 = __toESM(require_react());

// node_modules/react-bootstrap/esm/AccordionBody.js
var import_classnames3 = __toESM(require_classnames());
var React5 = __toESM(require_react());
var import_react3 = __toESM(require_react());

// node_modules/react-bootstrap/esm/AccordionCollapse.js
var import_classnames2 = __toESM(require_classnames());
var React3 = __toESM(require_react());
var import_react2 = __toESM(require_react());

// node_modules/react-bootstrap/esm/Collapse.js
var import_classnames = __toESM(require_classnames());
var import_react = __toESM(require_react());

// node_modules/react-bootstrap/esm/createChainedFunction.js
function createChainedFunction(...funcs) {
  return funcs.filter((f) => f != null).reduce((acc, f) => {
    if (typeof f !== "function") {
      throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");
    }
    if (acc === null)
      return f;
    return function chainedFunction(...args) {
      acc.apply(this, args);
      f.apply(this, args);
    };
  }, null);
}
var createChainedFunction_default = createChainedFunction;

// node_modules/react-bootstrap/esm/Collapse.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var MARGINS = {
  height: ["marginTop", "marginBottom"],
  width: ["marginLeft", "marginRight"]
};
function getDefaultDimensionValue(dimension, elem) {
  const offset = `offset${dimension[0].toUpperCase()}${dimension.slice(1)}`;
  const value = elem[offset];
  const margins = MARGINS[dimension];
  return value + parseInt(css_default(elem, margins[0]), 10) + parseInt(css_default(elem, margins[1]), 10);
}
var collapseStyles = {
  [EXITED]: "collapse",
  [EXITING]: "collapsing",
  [ENTERING]: "collapsing",
  [ENTERED]: "collapse show"
};
var defaultProps = {
  in: false,
  timeout: 300,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  getDimensionValue: getDefaultDimensionValue
};
var Collapse = import_react.default.forwardRef((_a, ref) => {
  var _b = _a, {
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    className,
    children,
    dimension = "height",
    getDimensionValue = getDefaultDimensionValue
  } = _b, props = __objRest(_b, [
    "onEnter",
    "onEntering",
    "onEntered",
    "onExit",
    "onExiting",
    "className",
    "children",
    "dimension",
    "getDimensionValue"
  ]);
  const computedDimension = typeof dimension === "function" ? dimension() : dimension;
  const handleEnter = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    elem.style[computedDimension] = "0";
  }, onEnter), [computedDimension, onEnter]);
  const handleEntering = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    const scroll = `scroll${computedDimension[0].toUpperCase()}${computedDimension.slice(1)}`;
    elem.style[computedDimension] = `${elem[scroll]}px`;
  }, onEntering), [computedDimension, onEntering]);
  const handleEntered = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    elem.style[computedDimension] = null;
  }, onEntered), [computedDimension, onEntered]);
  const handleExit = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    elem.style[computedDimension] = `${getDimensionValue(computedDimension, elem)}px`;
    triggerBrowserReflow(elem);
  }, onExit), [onExit, getDimensionValue, computedDimension]);
  const handleExiting = (0, import_react.useMemo)(() => createChainedFunction_default((elem) => {
    elem.style[computedDimension] = null;
  }, onExiting), [computedDimension, onExiting]);
  return (0, import_jsx_runtime.jsx)(TransitionWrapper_default, __spreadProps(__spreadValues({
    ref,
    addEndListener: transitionEndListener
  }, props), {
    "aria-expanded": props.role ? props.in : null,
    onEnter: handleEnter,
    onEntering: handleEntering,
    onEntered: handleEntered,
    onExit: handleExit,
    onExiting: handleExiting,
    childRef: children.ref,
    children: (state, innerProps) => import_react.default.cloneElement(children, __spreadProps(__spreadValues({}, innerProps), {
      className: (0, import_classnames.default)(className, children.props.className, collapseStyles[state], computedDimension === "width" && "collapse-horizontal")
    }))
  }));
});
Collapse.defaultProps = defaultProps;
var Collapse_default = Collapse;

// node_modules/react-bootstrap/esm/AccordionContext.js
var React2 = __toESM(require_react());
function isAccordionItemSelected(activeEventKey, eventKey) {
  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;
}
var context = React2.createContext({});
context.displayName = "AccordionContext";
var AccordionContext_default = context;

// node_modules/react-bootstrap/esm/AccordionCollapse.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var AccordionCollapse = React3.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "div",
    bsPrefix,
    className,
    children,
    eventKey
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "className",
    "children",
    "eventKey"
  ]);
  const {
    activeEventKey
  } = (0, import_react2.useContext)(AccordionContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "accordion-collapse");
  return (0, import_jsx_runtime2.jsx)(Collapse_default, __spreadProps(__spreadValues({
    ref,
    in: isAccordionItemSelected(activeEventKey, eventKey)
  }, props), {
    className: (0, import_classnames2.default)(className, bsPrefix),
    children: (0, import_jsx_runtime2.jsx)(Component, {
      children: React3.Children.only(children)
    })
  }));
});
AccordionCollapse.displayName = "AccordionCollapse";
var AccordionCollapse_default = AccordionCollapse;

// node_modules/react-bootstrap/esm/AccordionItemContext.js
var React4 = __toESM(require_react());
var context2 = React4.createContext({
  eventKey: ""
});
context2.displayName = "AccordionItemContext";
var AccordionItemContext_default = context2;

// node_modules/react-bootstrap/esm/AccordionBody.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var AccordionBody = React5.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "div",
    bsPrefix,
    className
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "className"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "accordion-body");
  const {
    eventKey
  } = (0, import_react3.useContext)(AccordionItemContext_default);
  return (0, import_jsx_runtime3.jsx)(AccordionCollapse_default, {
    eventKey,
    children: (0, import_jsx_runtime3.jsx)(Component, __spreadProps(__spreadValues({
      ref
    }, props), {
      className: (0, import_classnames3.default)(className, bsPrefix)
    }))
  });
});
AccordionBody.displayName = "AccordionBody";
var AccordionBody_default = AccordionBody;

// node_modules/react-bootstrap/esm/AccordionButton.js
var React6 = __toESM(require_react());
var import_react4 = __toESM(require_react());
var import_classnames4 = __toESM(require_classnames());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
function useAccordionButton(eventKey, onClick) {
  const {
    activeEventKey,
    onSelect,
    alwaysOpen
  } = (0, import_react4.useContext)(AccordionContext_default);
  return (e) => {
    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;
    if (alwaysOpen) {
      if (Array.isArray(activeEventKey)) {
        if (activeEventKey.includes(eventKey)) {
          eventKeyPassed = activeEventKey.filter((k) => k !== eventKey);
        } else {
          eventKeyPassed = [...activeEventKey, eventKey];
        }
      } else {
        eventKeyPassed = [eventKey];
      }
    }
    onSelect == null ? void 0 : onSelect(eventKeyPassed, e);
    onClick == null ? void 0 : onClick(e);
  };
}
var AccordionButton = React6.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "button",
    bsPrefix,
    className,
    onClick
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "className",
    "onClick"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "accordion-button");
  const {
    eventKey
  } = (0, import_react4.useContext)(AccordionItemContext_default);
  const accordionOnClick = useAccordionButton(eventKey, onClick);
  const {
    activeEventKey
  } = (0, import_react4.useContext)(AccordionContext_default);
  if (Component === "button") {
    props.type = "button";
  }
  return (0, import_jsx_runtime4.jsx)(Component, __spreadProps(__spreadValues({
    ref,
    onClick: accordionOnClick
  }, props), {
    "aria-expanded": eventKey === activeEventKey,
    className: (0, import_classnames4.default)(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && "collapsed")
  }));
});
AccordionButton.displayName = "AccordionButton";
var AccordionButton_default = AccordionButton;

// node_modules/react-bootstrap/esm/AccordionHeader.js
var import_classnames5 = __toESM(require_classnames());
var React7 = __toESM(require_react());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var AccordionHeader = React7.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "h2",
    bsPrefix,
    className,
    children,
    onClick
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "className",
    "children",
    "onClick"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "accordion-header");
  return (0, import_jsx_runtime5.jsx)(Component, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames5.default)(className, bsPrefix),
    children: (0, import_jsx_runtime5.jsx)(AccordionButton_default, {
      onClick,
      children
    })
  }));
});
AccordionHeader.displayName = "AccordionHeader";
var AccordionHeader_default = AccordionHeader;

// node_modules/react-bootstrap/esm/AccordionItem.js
var import_classnames6 = __toESM(require_classnames());
var React8 = __toESM(require_react());
var import_react5 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var AccordionItem = React8.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "div",
    bsPrefix,
    className,
    eventKey
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "className",
    "eventKey"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "accordion-item");
  const contextValue = (0, import_react5.useMemo)(() => ({
    eventKey
  }), [eventKey]);
  return (0, import_jsx_runtime6.jsx)(AccordionItemContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime6.jsx)(Component, __spreadProps(__spreadValues({
      ref
    }, props), {
      className: (0, import_classnames6.default)(className, bsPrefix)
    }))
  });
});
AccordionItem.displayName = "AccordionItem";
var AccordionItem_default = AccordionItem;

// node_modules/react-bootstrap/esm/Accordion.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var Accordion = React9.forwardRef((props, ref) => {
  const _a = useUncontrolled(props, {
    activeKey: "onSelect"
  }), {
    as: Component = "div",
    activeKey,
    bsPrefix,
    className,
    onSelect,
    flush,
    alwaysOpen
  } = _a, controlledProps = __objRest(_a, [
    "as",
    "activeKey",
    "bsPrefix",
    "className",
    "onSelect",
    "flush",
    "alwaysOpen"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "accordion");
  const contextValue = (0, import_react6.useMemo)(() => ({
    activeEventKey: activeKey,
    onSelect,
    alwaysOpen
  }), [activeKey, onSelect, alwaysOpen]);
  return (0, import_jsx_runtime7.jsx)(AccordionContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime7.jsx)(Component, __spreadProps(__spreadValues({
      ref
    }, controlledProps), {
      className: (0, import_classnames7.default)(className, prefix, flush && `${prefix}-flush`)
    }))
  });
});
Accordion.displayName = "Accordion";
var Accordion_default = Object.assign(Accordion, {
  Button: AccordionButton_default,
  Collapse: AccordionCollapse_default,
  Item: AccordionItem_default,
  Header: AccordionHeader_default,
  Body: AccordionBody_default
});

// node_modules/react-bootstrap/esm/Alert.js
var import_classnames10 = __toESM(require_classnames());
var React14 = __toESM(require_react());

// node_modules/@restart/ui/esm/Anchor.js
var React11 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useEventListener.js
var import_react7 = __toESM(require_react());
function useEventListener(eventTarget, event, listener, capture) {
  if (capture === void 0) {
    capture = false;
  }
  var handler = useEventCallback(listener);
  (0, import_react7.useEffect)(function() {
    var target = typeof eventTarget === "function" ? eventTarget() : eventTarget;
    target.addEventListener(event, handler, capture);
    return function() {
      return target.removeEventListener(event, handler, capture);
    };
  }, [eventTarget]);
}

// node_modules/@restart/hooks/esm/useGlobalListener.js
var import_react8 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useInterval.js
var import_react9 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useRafInterval.js
var import_react10 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useMergeState.js
var import_react11 = __toESM(require_react());

// node_modules/@restart/hooks/esm/usePrevious.js
var import_react12 = __toESM(require_react());
function usePrevious(value) {
  var ref = (0, import_react12.useRef)(null);
  (0, import_react12.useEffect)(function() {
    ref.current = value;
  });
  return ref.current;
}

// node_modules/@restart/hooks/esm/useImage.js
var import_react13 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useResizeObserver.js
var import_react15 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useIsomorphicEffect.js
var import_react14 = __toESM(require_react());
var isReactNative = typeof global !== "undefined" && global.navigator && global.navigator.product === "ReactNative";
var isDOM = typeof document !== "undefined";
var useIsomorphicEffect_default = isDOM || isReactNative ? import_react14.useLayoutEffect : import_react14.useEffect;

// node_modules/@restart/ui/esm/Button.js
var React10 = __toESM(require_react());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var _excluded = ["as", "disabled"];
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function isTrivialHref(href) {
  return !href || href.trim() === "#";
}
function useButtonProps({
  tagName,
  disabled,
  href,
  target,
  rel,
  onClick,
  tabIndex = 0,
  type
}) {
  if (!tagName) {
    if (href != null || target != null || rel != null) {
      tagName = "a";
    } else {
      tagName = "button";
    }
  }
  const meta = {
    tagName
  };
  if (tagName === "button") {
    return [{
      type: type || "button",
      disabled
    }, meta];
  }
  const handleClick = (event) => {
    if (disabled || tagName === "a" && isTrivialHref(href)) {
      event.preventDefault();
    }
    if (disabled) {
      event.stopPropagation();
      return;
    }
    onClick == null ? void 0 : onClick(event);
  };
  const handleKeyDown = (event) => {
    if (event.key === " ") {
      event.preventDefault();
      handleClick(event);
    }
  };
  if (tagName === "a") {
    href || (href = "#");
    if (disabled) {
      href = void 0;
    }
  }
  return [{
    role: "button",
    disabled: void 0,
    tabIndex: disabled ? void 0 : tabIndex,
    href,
    target: tagName === "a" ? target : void 0,
    "aria-disabled": !disabled ? void 0 : disabled,
    rel: tagName === "a" ? rel : void 0,
    onClick: handleClick,
    onKeyDown: handleKeyDown
  }, meta];
}
var Button = React10.forwardRef((_ref, ref) => {
  let {
    as: asProp,
    disabled
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
  const [buttonProps, {
    tagName: Component
  }] = useButtonProps(Object.assign({
    tagName: asProp,
    disabled
  }, props));
  return (0, import_jsx_runtime8.jsx)(Component, Object.assign({}, props, buttonProps, {
    ref
  }));
});
Button.displayName = "Button";
var Button_default = Button;

// node_modules/@restart/ui/esm/Anchor.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var _excluded2 = ["onKeyDown"];
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function isTrivialHref2(href) {
  return !href || href.trim() === "#";
}
var Anchor = React11.forwardRef((_ref, ref) => {
  let {
    onKeyDown
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded2);
  const [buttonProps] = useButtonProps(Object.assign({
    tagName: "a"
  }, props));
  const handleKeyDown = useEventCallback((e) => {
    buttonProps.onKeyDown(e);
    onKeyDown == null ? void 0 : onKeyDown(e);
  });
  if (isTrivialHref2(props.href) && !props.role || props.role === "button") {
    return (0, import_jsx_runtime9.jsx)("a", Object.assign({
      ref
    }, props, buttonProps, {
      onKeyDown: handleKeyDown
    }));
  }
  return (0, import_jsx_runtime9.jsx)("a", Object.assign({
    ref
  }, props, {
    onKeyDown
  }));
});
Anchor.displayName = "Anchor";
var Anchor_default = Anchor;

// node_modules/react-bootstrap/esm/CloseButton.js
var import_prop_types = __toESM(require_prop_types());
var React12 = __toESM(require_react());
var import_classnames8 = __toESM(require_classnames());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var propTypes = {
  "aria-label": import_prop_types.default.string,
  onClick: import_prop_types.default.func,
  variant: import_prop_types.default.oneOf(["white"])
};
var defaultProps2 = {
  "aria-label": "Close"
};
var CloseButton = React12.forwardRef((_a, ref) => {
  var _b = _a, {
    className,
    variant
  } = _b, props = __objRest(_b, [
    "className",
    "variant"
  ]);
  return (0, import_jsx_runtime10.jsx)("button", __spreadValues({
    ref,
    type: "button",
    className: (0, import_classnames8.default)("btn-close", variant && `btn-close-${variant}`, className)
  }, props));
});
CloseButton.displayName = "CloseButton";
CloseButton.propTypes = propTypes;
CloseButton.defaultProps = defaultProps2;
var CloseButton_default = CloseButton;

// node_modules/react-bootstrap/esm/divWithClassName.js
var React13 = __toESM(require_react());
var import_classnames9 = __toESM(require_classnames());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var divWithClassName_default = (className) => React13.forwardRef((p, ref) => (0, import_jsx_runtime11.jsx)("div", __spreadProps(__spreadValues({}, p), {
  ref,
  className: (0, import_classnames9.default)(p.className, className)
})));

// node_modules/react-bootstrap/esm/Alert.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var DivStyledAsH4 = divWithClassName_default("h4");
DivStyledAsH4.displayName = "DivStyledAsH4";
var AlertHeading = createWithBsPrefix("alert-heading", {
  Component: DivStyledAsH4
});
var AlertLink = createWithBsPrefix("alert-link", {
  Component: Anchor_default
});
var defaultProps3 = {
  variant: "primary",
  show: true,
  transition: Fade_default,
  closeLabel: "Close alert"
};
var Alert = React14.forwardRef((uncontrolledProps, ref) => {
  const _a = useUncontrolled(uncontrolledProps, {
    show: "onClose"
  }), {
    bsPrefix,
    show,
    closeLabel,
    closeVariant,
    className,
    children,
    variant,
    onClose,
    dismissible,
    transition
  } = _a, props = __objRest(_a, [
    "bsPrefix",
    "show",
    "closeLabel",
    "closeVariant",
    "className",
    "children",
    "variant",
    "onClose",
    "dismissible",
    "transition"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "alert");
  const handleClose = useEventCallback((e) => {
    if (onClose) {
      onClose(false, e);
    }
  });
  const Transition = transition === true ? Fade_default : transition;
  const alert = (0, import_jsx_runtime13.jsxs)("div", __spreadProps(__spreadValues({
    role: "alert"
  }, !Transition ? props : void 0), {
    ref,
    className: (0, import_classnames10.default)(className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`),
    children: [dismissible && (0, import_jsx_runtime12.jsx)(CloseButton_default, {
      onClick: handleClose,
      "aria-label": closeLabel,
      variant: closeVariant
    }), children]
  }));
  if (!Transition)
    return show ? alert : null;
  return (0, import_jsx_runtime12.jsx)(Transition, __spreadProps(__spreadValues({
    unmountOnExit: true
  }, props), {
    ref: void 0,
    in: show,
    children: alert
  }));
});
Alert.displayName = "Alert";
Alert.defaultProps = defaultProps3;
var Alert_default = Object.assign(Alert, {
  Link: AlertLink,
  Heading: AlertHeading
});

// node_modules/react-bootstrap/esm/Anchor.js
var Anchor_default2 = Anchor_default;

// node_modules/react-bootstrap/esm/Badge.js
var import_classnames11 = __toESM(require_classnames());
var React15 = __toESM(require_react());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var defaultProps4 = {
  bg: "primary",
  pill: false
};
var Badge = React15.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    bg,
    pill,
    text,
    className,
    as: Component = "span"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "bg",
    "pill",
    "text",
    "className",
    "as"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "badge");
  return (0, import_jsx_runtime14.jsx)(Component, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames11.default)(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)
  }));
});
Badge.displayName = "Badge";
Badge.defaultProps = defaultProps4;
var Badge_default = Badge;

// node_modules/react-bootstrap/esm/Breadcrumb.js
var import_classnames13 = __toESM(require_classnames());
var React17 = __toESM(require_react());

// node_modules/react-bootstrap/esm/BreadcrumbItem.js
var import_classnames12 = __toESM(require_classnames());
var React16 = __toESM(require_react());
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var defaultProps5 = {
  active: false,
  linkProps: {}
};
var BreadcrumbItem = React16.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    active,
    children,
    className,
    as: Component = "li",
    linkAs: LinkComponent = Anchor_default,
    linkProps,
    href,
    title,
    target
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "active",
    "children",
    "className",
    "as",
    "linkAs",
    "linkProps",
    "href",
    "title",
    "target"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "breadcrumb-item");
  return (0, import_jsx_runtime15.jsx)(Component, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames12.default)(prefix, className, {
      active
    }),
    "aria-current": active ? "page" : void 0,
    children: active ? children : (0, import_jsx_runtime15.jsx)(LinkComponent, __spreadProps(__spreadValues({}, linkProps), {
      href,
      title,
      target,
      children
    }))
  }));
});
BreadcrumbItem.displayName = "BreadcrumbItem";
BreadcrumbItem.defaultProps = defaultProps5;
var BreadcrumbItem_default = BreadcrumbItem;

// node_modules/react-bootstrap/esm/Breadcrumb.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var defaultProps6 = {
  label: "breadcrumb",
  listProps: {}
};
var Breadcrumb = React17.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    listProps,
    children,
    label,
    as: Component = "nav"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "listProps",
    "children",
    "label",
    "as"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "breadcrumb");
  return (0, import_jsx_runtime16.jsx)(Component, __spreadProps(__spreadValues({
    "aria-label": label,
    className,
    ref
  }, props), {
    children: (0, import_jsx_runtime16.jsx)("ol", __spreadProps(__spreadValues({}, listProps), {
      className: (0, import_classnames13.default)(prefix, listProps == null ? void 0 : listProps.className),
      children
    }))
  }));
});
Breadcrumb.displayName = "Breadcrumb";
Breadcrumb.defaultProps = defaultProps6;
var Breadcrumb_default = Object.assign(Breadcrumb, {
  Item: BreadcrumbItem_default
});

// node_modules/react-bootstrap/esm/Button.js
var import_classnames14 = __toESM(require_classnames());
var React18 = __toESM(require_react());
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var defaultProps7 = {
  variant: "primary",
  active: false,
  disabled: false
};
var Button2 = React18.forwardRef((_a, ref) => {
  var _b = _a, {
    as,
    bsPrefix,
    variant,
    size: size2,
    active,
    className
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "variant",
    "size",
    "active",
    "className"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "btn");
  const [buttonProps, {
    tagName
  }] = useButtonProps(__spreadValues({
    tagName: as
  }, props));
  const Component = tagName;
  return (0, import_jsx_runtime17.jsx)(Component, __spreadProps(__spreadValues(__spreadValues({}, buttonProps), props), {
    ref,
    className: (0, import_classnames14.default)(className, prefix, active && "active", variant && `${prefix}-${variant}`, size2 && `${prefix}-${size2}`, props.href && props.disabled && "disabled")
  }));
});
Button2.displayName = "Button";
Button2.defaultProps = defaultProps7;
var Button_default2 = Button2;

// node_modules/react-bootstrap/esm/ButtonGroup.js
var import_classnames15 = __toESM(require_classnames());
var React19 = __toESM(require_react());
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var defaultProps8 = {
  vertical: false,
  role: "group"
};
var ButtonGroup = React19.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    size: size2,
    vertical,
    className,
    as: Component = "div"
  } = _b, rest = __objRest(_b, [
    "bsPrefix",
    "size",
    "vertical",
    "className",
    "as"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "btn-group");
  let baseClass = prefix;
  if (vertical)
    baseClass = `${prefix}-vertical`;
  return (0, import_jsx_runtime18.jsx)(Component, __spreadProps(__spreadValues({}, rest), {
    ref,
    className: (0, import_classnames15.default)(className, baseClass, size2 && `${prefix}-${size2}`)
  }));
});
ButtonGroup.displayName = "ButtonGroup";
ButtonGroup.defaultProps = defaultProps8;
var ButtonGroup_default = ButtonGroup;

// node_modules/react-bootstrap/esm/ButtonToolbar.js
var import_classnames16 = __toESM(require_classnames());
var React20 = __toESM(require_react());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var defaultProps9 = {
  role: "toolbar"
};
var ButtonToolbar = React20.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "btn-toolbar");
  return (0, import_jsx_runtime19.jsx)("div", __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames16.default)(className, prefix)
  }));
});
ButtonToolbar.displayName = "ButtonToolbar";
ButtonToolbar.defaultProps = defaultProps9;
var ButtonToolbar_default = ButtonToolbar;

// node_modules/react-bootstrap/esm/Card.js
var import_classnames19 = __toESM(require_classnames());
var React24 = __toESM(require_react());

// node_modules/react-bootstrap/esm/CardImg.js
var import_classnames17 = __toESM(require_classnames());
var React21 = __toESM(require_react());
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var CardImg = React21.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    variant,
    as: Component = "img"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "variant",
    "as"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "card-img");
  return (0, import_jsx_runtime20.jsx)(Component, __spreadValues({
    ref,
    className: (0, import_classnames17.default)(variant ? `${prefix}-${variant}` : prefix, className)
  }, props));
});
CardImg.displayName = "CardImg";
var CardImg_default = CardImg;

// node_modules/react-bootstrap/esm/CardHeader.js
var import_classnames18 = __toESM(require_classnames());
var React23 = __toESM(require_react());
var import_react16 = __toESM(require_react());

// node_modules/react-bootstrap/esm/CardHeaderContext.js
var React22 = __toESM(require_react());
var context3 = React22.createContext(null);
context3.displayName = "CardHeaderContext";
var CardHeaderContext_default = context3;

// node_modules/react-bootstrap/esm/CardHeader.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var CardHeader = React23.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    as: Component = "div"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "as"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "card-header");
  const contextValue = (0, import_react16.useMemo)(() => ({
    cardHeaderBsPrefix: prefix
  }), [prefix]);
  return (0, import_jsx_runtime21.jsx)(CardHeaderContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime21.jsx)(Component, __spreadProps(__spreadValues({
      ref
    }, props), {
      className: (0, import_classnames18.default)(className, prefix)
    }))
  });
});
CardHeader.displayName = "CardHeader";
var CardHeader_default = CardHeader;

// node_modules/react-bootstrap/esm/Card.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var DivStyledAsH5 = divWithClassName_default("h5");
var DivStyledAsH6 = divWithClassName_default("h6");
var CardBody = createWithBsPrefix("card-body");
var CardTitle = createWithBsPrefix("card-title", {
  Component: DivStyledAsH5
});
var CardSubtitle = createWithBsPrefix("card-subtitle", {
  Component: DivStyledAsH6
});
var CardLink = createWithBsPrefix("card-link", {
  Component: "a"
});
var CardText = createWithBsPrefix("card-text", {
  Component: "p"
});
var CardFooter = createWithBsPrefix("card-footer");
var CardImgOverlay = createWithBsPrefix("card-img-overlay");
var defaultProps10 = {
  body: false
};
var Card = React24.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    bg,
    text,
    border,
    body,
    children,
    as: Component = "div"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "bg",
    "text",
    "border",
    "body",
    "children",
    "as"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "card");
  return (0, import_jsx_runtime22.jsx)(Component, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames19.default)(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),
    children: body ? (0, import_jsx_runtime22.jsx)(CardBody, {
      children
    }) : children
  }));
});
Card.displayName = "Card";
Card.defaultProps = defaultProps10;
var Card_default = Object.assign(Card, {
  Img: CardImg_default,
  Title: CardTitle,
  Subtitle: CardSubtitle,
  Body: CardBody,
  Link: CardLink,
  Text: CardText,
  Header: CardHeader_default,
  Footer: CardFooter,
  ImgOverlay: CardImgOverlay
});

// node_modules/react-bootstrap/esm/CardGroup.js
var CardGroup_default = createWithBsPrefix("card-group");

// node_modules/@restart/hooks/esm/useUpdateEffect.js
var import_react17 = __toESM(require_react());
function useUpdateEffect(fn, deps) {
  var isFirst = (0, import_react17.useRef)(true);
  (0, import_react17.useEffect)(function() {
    if (isFirst.current) {
      isFirst.current = false;
      return;
    }
    return fn();
  }, deps);
}
var useUpdateEffect_default = useUpdateEffect;

// node_modules/react-bootstrap/esm/Carousel.js
var import_classnames21 = __toESM(require_classnames());
var React27 = __toESM(require_react());
var import_react18 = __toESM(require_react());

// node_modules/react-bootstrap/esm/CarouselCaption.js
var CarouselCaption_default = createWithBsPrefix("carousel-caption");

// node_modules/react-bootstrap/esm/CarouselItem.js
var import_classnames20 = __toESM(require_classnames());
var React25 = __toESM(require_react());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var CarouselItem = React25.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "div",
    bsPrefix,
    className
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "className"
  ]);
  const finalClassName = (0, import_classnames20.default)(className, useBootstrapPrefix(bsPrefix, "carousel-item"));
  return (0, import_jsx_runtime23.jsx)(Component, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: finalClassName
  }));
});
CarouselItem.displayName = "CarouselItem";
var CarouselItem_default = CarouselItem;

// node_modules/react-bootstrap/esm/ElementChildren.js
var React26 = __toESM(require_react());
function map(children, func) {
  let index = 0;
  return React26.Children.map(children, (child) => React26.isValidElement(child) ? func(child, index++) : child);
}
function forEach(children, func) {
  let index = 0;
  React26.Children.forEach(children, (child) => {
    if (React26.isValidElement(child))
      func(child, index++);
  });
}
function hasChildOfType(children, type) {
  return React26.Children.toArray(children).some((child) => React26.isValidElement(child) && child.type === type);
}

// node_modules/react-bootstrap/esm/Carousel.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var SWIPE_THRESHOLD = 40;
var defaultProps11 = {
  slide: true,
  fade: false,
  controls: true,
  indicators: true,
  indicatorLabels: [],
  defaultActiveIndex: 0,
  interval: 5e3,
  keyboard: true,
  pause: "hover",
  wrap: true,
  touch: true,
  prevIcon: (0, import_jsx_runtime24.jsx)("span", {
    "aria-hidden": "true",
    className: "carousel-control-prev-icon"
  }),
  prevLabel: "Previous",
  nextIcon: (0, import_jsx_runtime24.jsx)("span", {
    "aria-hidden": "true",
    className: "carousel-control-next-icon"
  }),
  nextLabel: "Next"
};
function isVisible(element) {
  if (!element || !element.style || !element.parentNode || !element.parentNode.style) {
    return false;
  }
  const elementStyle = getComputedStyle(element);
  return elementStyle.display !== "none" && elementStyle.visibility !== "hidden" && getComputedStyle(element.parentNode).display !== "none";
}
var Carousel = React27.forwardRef((uncontrolledProps, ref) => {
  const _a = useUncontrolled(uncontrolledProps, {
    activeIndex: "onSelect"
  }), {
    as: Component = "div",
    bsPrefix,
    slide,
    fade,
    controls,
    indicators,
    indicatorLabels,
    activeIndex,
    onSelect,
    onSlide,
    onSlid,
    interval,
    keyboard,
    onKeyDown,
    pause,
    onMouseOver,
    onMouseOut,
    wrap,
    touch,
    onTouchStart,
    onTouchMove,
    onTouchEnd,
    prevIcon,
    prevLabel,
    nextIcon,
    nextLabel,
    variant,
    className,
    children
  } = _a, props = __objRest(_a, [
    "as",
    "bsPrefix",
    "slide",
    "fade",
    "controls",
    "indicators",
    "indicatorLabels",
    "activeIndex",
    "onSelect",
    "onSlide",
    "onSlid",
    "interval",
    "keyboard",
    "onKeyDown",
    "pause",
    "onMouseOver",
    "onMouseOut",
    "wrap",
    "touch",
    "onTouchStart",
    "onTouchMove",
    "onTouchEnd",
    "prevIcon",
    "prevLabel",
    "nextIcon",
    "nextLabel",
    "variant",
    "className",
    "children"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "carousel");
  const isRTL = useIsRTL();
  const nextDirectionRef = (0, import_react18.useRef)(null);
  const [direction, setDirection] = (0, import_react18.useState)("next");
  const [paused, setPaused] = (0, import_react18.useState)(false);
  const [isSliding, setIsSliding] = (0, import_react18.useState)(false);
  const [renderedActiveIndex, setRenderedActiveIndex] = (0, import_react18.useState)(activeIndex || 0);
  (0, import_react18.useEffect)(() => {
    if (!isSliding && activeIndex !== renderedActiveIndex) {
      if (nextDirectionRef.current) {
        setDirection(nextDirectionRef.current);
      } else {
        setDirection((activeIndex || 0) > renderedActiveIndex ? "next" : "prev");
      }
      if (slide) {
        setIsSliding(true);
      }
      setRenderedActiveIndex(activeIndex || 0);
    }
  }, [activeIndex, isSliding, renderedActiveIndex, slide]);
  (0, import_react18.useEffect)(() => {
    if (nextDirectionRef.current) {
      nextDirectionRef.current = null;
    }
  });
  let numChildren = 0;
  let activeChildInterval;
  forEach(children, (child, index) => {
    ++numChildren;
    if (index === activeIndex) {
      activeChildInterval = child.props.interval;
    }
  });
  const activeChildIntervalRef = useCommittedRef_default(activeChildInterval);
  const prev = (0, import_react18.useCallback)((event) => {
    if (isSliding) {
      return;
    }
    let nextActiveIndex = renderedActiveIndex - 1;
    if (nextActiveIndex < 0) {
      if (!wrap) {
        return;
      }
      nextActiveIndex = numChildren - 1;
    }
    nextDirectionRef.current = "prev";
    onSelect == null ? void 0 : onSelect(nextActiveIndex, event);
  }, [isSliding, renderedActiveIndex, onSelect, wrap, numChildren]);
  const next = useEventCallback((event) => {
    if (isSliding) {
      return;
    }
    let nextActiveIndex = renderedActiveIndex + 1;
    if (nextActiveIndex >= numChildren) {
      if (!wrap) {
        return;
      }
      nextActiveIndex = 0;
    }
    nextDirectionRef.current = "next";
    onSelect == null ? void 0 : onSelect(nextActiveIndex, event);
  });
  const elementRef = (0, import_react18.useRef)();
  (0, import_react18.useImperativeHandle)(ref, () => ({
    element: elementRef.current,
    prev,
    next
  }));
  const nextWhenVisible = useEventCallback(() => {
    if (!document.hidden && isVisible(elementRef.current)) {
      if (isRTL) {
        prev();
      } else {
        next();
      }
    }
  });
  const slideDirection = direction === "next" ? "start" : "end";
  useUpdateEffect_default(() => {
    if (slide) {
      return;
    }
    onSlide == null ? void 0 : onSlide(renderedActiveIndex, slideDirection);
    onSlid == null ? void 0 : onSlid(renderedActiveIndex, slideDirection);
  }, [renderedActiveIndex]);
  const orderClassName = `${prefix}-item-${direction}`;
  const directionalClassName = `${prefix}-item-${slideDirection}`;
  const handleEnter = (0, import_react18.useCallback)((node) => {
    triggerBrowserReflow(node);
    onSlide == null ? void 0 : onSlide(renderedActiveIndex, slideDirection);
  }, [onSlide, renderedActiveIndex, slideDirection]);
  const handleEntered = (0, import_react18.useCallback)(() => {
    setIsSliding(false);
    onSlid == null ? void 0 : onSlid(renderedActiveIndex, slideDirection);
  }, [onSlid, renderedActiveIndex, slideDirection]);
  const handleKeyDown = (0, import_react18.useCallback)((event) => {
    if (keyboard && !/input|textarea/i.test(event.target.tagName)) {
      switch (event.key) {
        case "ArrowLeft":
          event.preventDefault();
          if (isRTL) {
            next(event);
          } else {
            prev(event);
          }
          return;
        case "ArrowRight":
          event.preventDefault();
          if (isRTL) {
            prev(event);
          } else {
            next(event);
          }
          return;
        default:
      }
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
  }, [keyboard, onKeyDown, prev, next, isRTL]);
  const handleMouseOver = (0, import_react18.useCallback)((event) => {
    if (pause === "hover") {
      setPaused(true);
    }
    onMouseOver == null ? void 0 : onMouseOver(event);
  }, [pause, onMouseOver]);
  const handleMouseOut = (0, import_react18.useCallback)((event) => {
    setPaused(false);
    onMouseOut == null ? void 0 : onMouseOut(event);
  }, [onMouseOut]);
  const touchStartXRef = (0, import_react18.useRef)(0);
  const touchDeltaXRef = (0, import_react18.useRef)(0);
  const touchUnpauseTimeout = useTimeout();
  const handleTouchStart = (0, import_react18.useCallback)((event) => {
    touchStartXRef.current = event.touches[0].clientX;
    touchDeltaXRef.current = 0;
    if (pause === "hover") {
      setPaused(true);
    }
    onTouchStart == null ? void 0 : onTouchStart(event);
  }, [pause, onTouchStart]);
  const handleTouchMove = (0, import_react18.useCallback)((event) => {
    if (event.touches && event.touches.length > 1) {
      touchDeltaXRef.current = 0;
    } else {
      touchDeltaXRef.current = event.touches[0].clientX - touchStartXRef.current;
    }
    onTouchMove == null ? void 0 : onTouchMove(event);
  }, [onTouchMove]);
  const handleTouchEnd = (0, import_react18.useCallback)((event) => {
    if (touch) {
      const touchDeltaX = touchDeltaXRef.current;
      if (Math.abs(touchDeltaX) > SWIPE_THRESHOLD) {
        if (touchDeltaX > 0) {
          prev(event);
        } else {
          next(event);
        }
      }
    }
    if (pause === "hover") {
      touchUnpauseTimeout.set(() => {
        setPaused(false);
      }, interval || void 0);
    }
    onTouchEnd == null ? void 0 : onTouchEnd(event);
  }, [touch, pause, prev, next, touchUnpauseTimeout, interval, onTouchEnd]);
  const shouldPlay = interval != null && !paused && !isSliding;
  const intervalHandleRef = (0, import_react18.useRef)();
  (0, import_react18.useEffect)(() => {
    var _ref, _activeChildIntervalR;
    if (!shouldPlay) {
      return void 0;
    }
    const nextFunc = isRTL ? prev : next;
    intervalHandleRef.current = window.setInterval(document.visibilityState ? nextWhenVisible : nextFunc, (_ref = (_activeChildIntervalR = activeChildIntervalRef.current) != null ? _activeChildIntervalR : interval) != null ? _ref : void 0);
    return () => {
      if (intervalHandleRef.current !== null) {
        clearInterval(intervalHandleRef.current);
      }
    };
  }, [shouldPlay, prev, next, activeChildIntervalRef, interval, nextWhenVisible, isRTL]);
  const indicatorOnClicks = (0, import_react18.useMemo)(() => indicators && Array.from({
    length: numChildren
  }, (_, index) => (event) => {
    onSelect == null ? void 0 : onSelect(index, event);
  }), [indicators, numChildren, onSelect]);
  return (0, import_jsx_runtime25.jsxs)(Component, __spreadProps(__spreadValues({
    ref: elementRef
  }, props), {
    onKeyDown: handleKeyDown,
    onMouseOver: handleMouseOver,
    onMouseOut: handleMouseOut,
    onTouchStart: handleTouchStart,
    onTouchMove: handleTouchMove,
    onTouchEnd: handleTouchEnd,
    className: (0, import_classnames21.default)(className, prefix, slide && "slide", fade && `${prefix}-fade`, variant && `${prefix}-${variant}`),
    children: [indicators && (0, import_jsx_runtime24.jsx)("div", {
      className: `${prefix}-indicators`,
      children: map(children, (_, index) => (0, import_jsx_runtime24.jsx)("button", {
        type: "button",
        "data-bs-target": "",
        "aria-label": indicatorLabels != null && indicatorLabels.length ? indicatorLabels[index] : `Slide ${index + 1}`,
        className: index === renderedActiveIndex ? "active" : void 0,
        onClick: indicatorOnClicks ? indicatorOnClicks[index] : void 0,
        "aria-current": index === renderedActiveIndex
      }, index))
    }), (0, import_jsx_runtime24.jsx)("div", {
      className: `${prefix}-inner`,
      children: map(children, (child, index) => {
        const isActive = index === renderedActiveIndex;
        return slide ? (0, import_jsx_runtime24.jsx)(TransitionWrapper_default, {
          in: isActive,
          onEnter: isActive ? handleEnter : void 0,
          onEntered: isActive ? handleEntered : void 0,
          addEndListener: transitionEndListener,
          children: (status, innerProps) => React27.cloneElement(child, __spreadProps(__spreadValues({}, innerProps), {
            className: (0, import_classnames21.default)(child.props.className, isActive && status !== "entered" && orderClassName, (status === "entered" || status === "exiting") && "active", (status === "entering" || status === "exiting") && directionalClassName)
          }))
        }) : React27.cloneElement(child, {
          className: (0, import_classnames21.default)(child.props.className, isActive && "active")
        });
      })
    }), controls && (0, import_jsx_runtime25.jsxs)(import_jsx_runtime26.Fragment, {
      children: [(wrap || activeIndex !== 0) && (0, import_jsx_runtime25.jsxs)(Anchor_default, {
        className: `${prefix}-control-prev`,
        onClick: prev,
        children: [prevIcon, prevLabel && (0, import_jsx_runtime24.jsx)("span", {
          className: "visually-hidden",
          children: prevLabel
        })]
      }), (wrap || activeIndex !== numChildren - 1) && (0, import_jsx_runtime25.jsxs)(Anchor_default, {
        className: `${prefix}-control-next`,
        onClick: next,
        children: [nextIcon, nextLabel && (0, import_jsx_runtime24.jsx)("span", {
          className: "visually-hidden",
          children: nextLabel
        })]
      })]
    })]
  }));
});
Carousel.displayName = "Carousel";
Carousel.defaultProps = defaultProps11;
var Carousel_default = Object.assign(Carousel, {
  Caption: CarouselCaption_default,
  Item: CarouselItem_default
});

// node_modules/react-bootstrap/esm/Col.js
var import_classnames22 = __toESM(require_classnames());
var React28 = __toESM(require_react());
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
function useCol(_a) {
  var _b = _a, {
    as,
    bsPrefix,
    className
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "className"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "col");
  const breakpoints = useBootstrapBreakpoints();
  const spans = [];
  const classes = [];
  breakpoints.forEach((brkPoint) => {
    const propValue = props[brkPoint];
    delete props[brkPoint];
    let span;
    let offset;
    let order;
    if (typeof propValue === "object" && propValue != null) {
      ({
        span,
        offset,
        order
      } = propValue);
    } else {
      span = propValue;
    }
    const infix = brkPoint !== "xs" ? `-${brkPoint}` : "";
    if (span)
      spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);
    if (order != null)
      classes.push(`order${infix}-${order}`);
    if (offset != null)
      classes.push(`offset${infix}-${offset}`);
  });
  return [__spreadProps(__spreadValues({}, props), {
    className: (0, import_classnames22.default)(className, ...spans, ...classes)
  }), {
    as,
    bsPrefix,
    spans
  }];
}
var Col = React28.forwardRef((props, ref) => {
  const [_a, ..._b] = useCol(props), _c = _a, {
    className
  } = _c, colProps = __objRest(_c, [
    "className"
  ]), [{
    as: Component = "div",
    bsPrefix,
    spans
  }] = _b;
  return (0, import_jsx_runtime27.jsx)(Component, __spreadProps(__spreadValues({}, colProps), {
    ref,
    className: (0, import_classnames22.default)(className, !spans.length && bsPrefix)
  }));
});
Col.displayName = "Col";
var Col_default = Col;

// node_modules/react-bootstrap/esm/Dropdown.js
var import_classnames26 = __toESM(require_classnames());
var React42 = __toESM(require_react());
var import_react28 = __toESM(require_react());

// node_modules/dom-helpers/esm/querySelectorAll.js
var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
function qsa(element, selector) {
  return toArray(element.querySelectorAll(selector));
}

// node_modules/@restart/ui/esm/Dropdown.js
var import_react24 = __toESM(require_react());
var React35 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useForceUpdate.js
var import_react19 = __toESM(require_react());
function useForceUpdate() {
  var _useReducer = (0, import_react19.useReducer)(function(state) {
    return !state;
  }, false), dispatch = _useReducer[1];
  return dispatch;
}

// node_modules/@restart/ui/esm/DropdownContext.js
var React29 = __toESM(require_react());
var DropdownContext = React29.createContext(null);
var DropdownContext_default = DropdownContext;

// node_modules/@restart/ui/esm/DropdownMenu.js
var import_react20 = __toESM(require_react());
var React30 = __toESM(require_react());
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var _excluded3 = ["children"];
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var noop = () => {
};
function useDropdownMenu(options = {}) {
  const context6 = (0, import_react20.useContext)(DropdownContext_default);
  const [arrowElement, attachArrowRef] = useCallbackRef();
  const hasShownRef = (0, import_react20.useRef)(false);
  const {
    flip,
    offset,
    rootCloseEvent,
    fixed = false,
    placement: placementOverride,
    popperConfig = {},
    enableEventListeners = true,
    usePopper: shouldUsePopper = !!context6
  } = options;
  const show = (context6 == null ? void 0 : context6.show) == null ? !!options.show : context6.show;
  if (show && !hasShownRef.current) {
    hasShownRef.current = true;
  }
  const handleClose = (e) => {
    context6 == null ? void 0 : context6.toggle(false, e);
  };
  const {
    placement,
    setMenu,
    menuElement,
    toggleElement
  } = context6 || {};
  const popper = usePopper_default(toggleElement, menuElement, mergeOptionsWithPopperConfig({
    placement: placementOverride || placement || "bottom-start",
    enabled: shouldUsePopper,
    enableEvents: enableEventListeners == null ? show : enableEventListeners,
    offset,
    flip,
    fixed,
    arrowElement,
    popperConfig
  }));
  const menuProps = Object.assign({
    ref: setMenu || noop,
    "aria-labelledby": toggleElement == null ? void 0 : toggleElement.id
  }, popper.attributes.popper, {
    style: popper.styles.popper
  });
  const metadata = {
    show,
    placement,
    hasShown: hasShownRef.current,
    toggle: context6 == null ? void 0 : context6.toggle,
    popper: shouldUsePopper ? popper : null,
    arrowProps: shouldUsePopper ? Object.assign({
      ref: attachArrowRef
    }, popper.attributes.arrow, {
      style: popper.styles.arrow
    }) : {}
  };
  useClickOutside_default(menuElement, handleClose, {
    clickTrigger: rootCloseEvent,
    disabled: !show
  });
  return [menuProps, metadata];
}
var defaultProps12 = {
  usePopper: true
};
function DropdownMenu(_ref) {
  let {
    children
  } = _ref, options = _objectWithoutPropertiesLoose3(_ref, _excluded3);
  const [props, meta] = useDropdownMenu(options);
  return (0, import_jsx_runtime29.jsx)(import_jsx_runtime28.Fragment, {
    children: children(props, meta)
  });
}
DropdownMenu.displayName = "DropdownMenu";
DropdownMenu.defaultProps = defaultProps12;
var DropdownMenu_default = DropdownMenu;

// node_modules/@restart/ui/esm/DropdownToggle.js
var import_react22 = __toESM(require_react());
var React31 = __toESM(require_react());

// node_modules/@restart/ui/node_modules/@react-aria/ssr/dist/module.js
var import_react21 = __toESM(require_react());
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
}
var $9d939cbc98267846$exports = {};
$parcel$export($9d939cbc98267846$exports, "SSRProvider", () => $9d939cbc98267846$export$9f8ac96af4b1b2ae);
$parcel$export($9d939cbc98267846$exports, "useSSRSafeId", () => $9d939cbc98267846$export$619500959fc48b26);
$parcel$export($9d939cbc98267846$exports, "useIsSSR", () => $9d939cbc98267846$export$535bd6ca7f90a273);
var $9d939cbc98267846$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0
};
var $9d939cbc98267846$var$SSRContext = import_react21.default.createContext($9d939cbc98267846$var$defaultContext);
function $9d939cbc98267846$export$9f8ac96af4b1b2ae(props) {
  let cur = (0, import_react21.useContext)($9d939cbc98267846$var$SSRContext);
  let value = (0, import_react21.useMemo)(() => ({
    prefix: cur === $9d939cbc98267846$var$defaultContext ? "" : `${cur.prefix}-${++cur.current}`,
    current: 0
  }), [
    cur
  ]);
  return import_react21.default.createElement($9d939cbc98267846$var$SSRContext.Provider, {
    value
  }, props.children);
}
var $9d939cbc98267846$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
function $9d939cbc98267846$export$619500959fc48b26(defaultId) {
  let ctx = (0, import_react21.useContext)($9d939cbc98267846$var$SSRContext);
  if (ctx === $9d939cbc98267846$var$defaultContext && !$9d939cbc98267846$var$canUseDOM)
    console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  return (0, import_react21.useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [
    defaultId
  ]);
}
function $9d939cbc98267846$export$535bd6ca7f90a273() {
  let cur = (0, import_react21.useContext)($9d939cbc98267846$var$SSRContext);
  let isInSSRContext = cur !== $9d939cbc98267846$var$defaultContext;
  let [isSSR, setIsSSR] = (0, import_react21.useState)(isInSSRContext);
  if (typeof window !== "undefined" && isInSSRContext)
    (0, import_react21.useLayoutEffect)(() => {
      setIsSSR(false);
    }, []);
  return isSSR;
}

// node_modules/@restart/ui/esm/DropdownToggle.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var isRoleMenu = (el) => {
  var _el$getAttribute;
  return ((_el$getAttribute = el.getAttribute("role")) == null ? void 0 : _el$getAttribute.toLowerCase()) === "menu";
};
var noop2 = () => {
};
function useDropdownToggle() {
  const id = $9d939cbc98267846$export$619500959fc48b26();
  const {
    show = false,
    toggle = noop2,
    setToggle,
    menuElement
  } = (0, import_react22.useContext)(DropdownContext_default) || {};
  const handleClick = (0, import_react22.useCallback)((e) => {
    toggle(!show, e);
  }, [show, toggle]);
  const props = {
    id,
    ref: setToggle || noop2,
    onClick: handleClick,
    "aria-expanded": !!show
  };
  if (menuElement && isRoleMenu(menuElement)) {
    props["aria-haspopup"] = true;
  }
  return [props, {
    show,
    toggle
  }];
}
function DropdownToggle({
  children
}) {
  const [props, meta] = useDropdownToggle();
  return (0, import_jsx_runtime31.jsx)(import_jsx_runtime30.Fragment, {
    children: children(props, meta)
  });
}
DropdownToggle.displayName = "DropdownToggle";
var DropdownToggle_default = DropdownToggle;

// node_modules/@restart/ui/esm/DropdownItem.js
var React34 = __toESM(require_react());
var import_react23 = __toESM(require_react());

// node_modules/@restart/ui/esm/SelectableContext.js
var React32 = __toESM(require_react());
var SelectableContext = React32.createContext(null);
var makeEventKey = (eventKey, href = null) => {
  if (eventKey != null)
    return String(eventKey);
  return href || null;
};
var SelectableContext_default = SelectableContext;

// node_modules/@restart/ui/esm/NavContext.js
var React33 = __toESM(require_react());
var NavContext = React33.createContext(null);
NavContext.displayName = "NavContext";
var NavContext_default = NavContext;

// node_modules/@restart/ui/esm/DataKey.js
var ATTRIBUTE_PREFIX = `data-rr-ui-`;
var PROPERTY_PREFIX = `rrUi`;
function dataAttr(property) {
  return `${ATTRIBUTE_PREFIX}${property}`;
}
function dataProp(property) {
  return `${PROPERTY_PREFIX}${property}`;
}

// node_modules/@restart/ui/esm/DropdownItem.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var _excluded4 = ["eventKey", "disabled", "onClick", "active", "as"];
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useDropdownItem({
  key,
  href,
  active,
  disabled,
  onClick
}) {
  const onSelectCtx = (0, import_react23.useContext)(SelectableContext_default);
  const navContext = (0, import_react23.useContext)(NavContext_default);
  const {
    activeKey
  } = navContext || {};
  const eventKey = makeEventKey(key, href);
  const isActive = active == null && key != null ? makeEventKey(activeKey) === eventKey : active;
  const handleClick = useEventCallback((event) => {
    if (disabled)
      return;
    onClick == null ? void 0 : onClick(event);
    if (onSelectCtx && !event.isPropagationStopped()) {
      onSelectCtx(eventKey, event);
    }
  });
  return [{
    onClick: handleClick,
    "aria-disabled": disabled || void 0,
    "aria-selected": isActive,
    [dataAttr("dropdown-item")]: ""
  }, {
    isActive
  }];
}
var DropdownItem = React34.forwardRef((_ref, ref) => {
  let {
    eventKey,
    disabled,
    onClick,
    active,
    as: Component = Button_default
  } = _ref, props = _objectWithoutPropertiesLoose4(_ref, _excluded4);
  const [dropdownItemProps] = useDropdownItem({
    key: eventKey,
    href: props.href,
    disabled,
    onClick,
    active
  });
  return (0, import_jsx_runtime32.jsx)(Component, Object.assign({}, props, {
    ref
  }, dropdownItemProps));
});
DropdownItem.displayName = "DropdownItem";
var DropdownItem_default = DropdownItem;

// node_modules/@restart/ui/esm/Dropdown.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
function useRefWithUpdate() {
  const forceUpdate = useForceUpdate();
  const ref = (0, import_react24.useRef)(null);
  const attachRef = (0, import_react24.useCallback)((element) => {
    ref.current = element;
    forceUpdate();
  }, [forceUpdate]);
  return [ref, attachRef];
}
function Dropdown({
  defaultShow,
  show: rawShow,
  onSelect,
  onToggle: rawOnToggle,
  itemSelector = `* [${dataAttr("dropdown-item")}]`,
  focusFirstItemOnShow,
  placement = "bottom-start",
  children
}) {
  const window2 = useWindow();
  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle);
  const [menuRef, setMenu] = useRefWithUpdate();
  const menuElement = menuRef.current;
  const [toggleRef, setToggle] = useRefWithUpdate();
  const toggleElement = toggleRef.current;
  const lastShow = usePrevious(show);
  const lastSourceEvent = (0, import_react24.useRef)(null);
  const focusInDropdown = (0, import_react24.useRef)(false);
  const onSelectCtx = (0, import_react24.useContext)(SelectableContext_default);
  const toggle = (0, import_react24.useCallback)((nextShow, event, source = event == null ? void 0 : event.type) => {
    onToggle(nextShow, {
      originalEvent: event,
      source
    });
  }, [onToggle]);
  const handleSelect = useEventCallback((key, event) => {
    onSelect == null ? void 0 : onSelect(key, event);
    toggle(false, event, "select");
    if (!event.isPropagationStopped()) {
      onSelectCtx == null ? void 0 : onSelectCtx(key, event);
    }
  });
  const context6 = (0, import_react24.useMemo)(() => ({
    toggle,
    placement,
    show,
    menuElement,
    toggleElement,
    setMenu,
    setToggle
  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);
  if (menuElement && lastShow && !show) {
    focusInDropdown.current = menuElement.contains(menuElement.ownerDocument.activeElement);
  }
  const focusToggle = useEventCallback(() => {
    if (toggleElement && toggleElement.focus) {
      toggleElement.focus();
    }
  });
  const maybeFocusFirst = useEventCallback(() => {
    const type = lastSourceEvent.current;
    let focusType = focusFirstItemOnShow;
    if (focusType == null) {
      focusType = menuRef.current && isRoleMenu(menuRef.current) ? "keyboard" : false;
    }
    if (focusType === false || focusType === "keyboard" && !/^key.+$/.test(type)) {
      return;
    }
    const first = qsa(menuRef.current, itemSelector)[0];
    if (first && first.focus)
      first.focus();
  });
  (0, import_react24.useEffect)(() => {
    if (show)
      maybeFocusFirst();
    else if (focusInDropdown.current) {
      focusInDropdown.current = false;
      focusToggle();
    }
  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);
  (0, import_react24.useEffect)(() => {
    lastSourceEvent.current = null;
  });
  const getNextFocusedChild = (current, offset) => {
    if (!menuRef.current)
      return null;
    const items = qsa(menuRef.current, itemSelector);
    let index = items.indexOf(current) + offset;
    index = Math.max(0, Math.min(index, items.length));
    return items[index];
  };
  useEventListener((0, import_react24.useCallback)(() => window2.document, [window2]), "keydown", (event) => {
    var _menuRef$current, _toggleRef$current;
    const {
      key
    } = event;
    const target = event.target;
    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);
    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target);
    const isInput = /input|textarea/i.test(target.tagName);
    if (isInput && (key === " " || key !== "Escape" && fromMenu || key === "Escape" && target.type === "search")) {
      return;
    }
    if (!fromMenu && !fromToggle) {
      return;
    }
    if (key === "Tab" && (!menuRef.current || !show)) {
      return;
    }
    lastSourceEvent.current = event.type;
    const meta = {
      originalEvent: event,
      source: event.type
    };
    switch (key) {
      case "ArrowUp": {
        const next = getNextFocusedChild(target, -1);
        if (next && next.focus)
          next.focus();
        event.preventDefault();
        return;
      }
      case "ArrowDown":
        event.preventDefault();
        if (!show) {
          onToggle(true, meta);
        } else {
          const next = getNextFocusedChild(target, 1);
          if (next && next.focus)
            next.focus();
        }
        return;
      case "Tab":
        addEventListener_default(target.ownerDocument, "keyup", (e) => {
          var _menuRef$current2;
          if (e.key === "Tab" && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {
            onToggle(false, meta);
          }
        }, {
          once: true
        });
        break;
      case "Escape":
        if (key === "Escape") {
          event.preventDefault();
          event.stopPropagation();
        }
        onToggle(false, meta);
        break;
      default:
    }
  });
  return (0, import_jsx_runtime33.jsx)(SelectableContext_default.Provider, {
    value: handleSelect,
    children: (0, import_jsx_runtime33.jsx)(DropdownContext_default.Provider, {
      value: context6,
      children
    })
  });
}
Dropdown.displayName = "Dropdown";
Dropdown.Menu = DropdownMenu_default;
Dropdown.Toggle = DropdownToggle_default;
Dropdown.Item = DropdownItem_default;
var Dropdown_default = Dropdown;

// node_modules/react-bootstrap/esm/DropdownContext.js
var React36 = __toESM(require_react());
var DropdownContext2 = React36.createContext({});
DropdownContext2.displayName = "DropdownContext";
var DropdownContext_default2 = DropdownContext2;

// node_modules/react-bootstrap/esm/DropdownItem.js
var import_classnames23 = __toESM(require_classnames());
var React37 = __toESM(require_react());
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var DropdownItem2 = React37.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    eventKey,
    disabled = false,
    onClick,
    active,
    as: Component = Anchor_default
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "eventKey",
    "disabled",
    "onClick",
    "active",
    "as"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "dropdown-item");
  const [dropdownItemProps, meta] = useDropdownItem({
    key: eventKey,
    href: props.href,
    disabled,
    onClick,
    active
  });
  return (0, import_jsx_runtime34.jsx)(Component, __spreadProps(__spreadValues(__spreadValues({}, props), dropdownItemProps), {
    ref,
    className: (0, import_classnames23.default)(className, prefix, meta.isActive && "active", disabled && "disabled")
  }));
});
DropdownItem2.displayName = "DropdownItem";
var DropdownItem_default2 = DropdownItem2;

// node_modules/react-bootstrap/esm/DropdownMenu.js
var import_classnames24 = __toESM(require_classnames());
var React40 = __toESM(require_react());
var import_react26 = __toESM(require_react());
var import_warning = __toESM(require_warning());

// node_modules/react-bootstrap/esm/InputGroupContext.js
var React38 = __toESM(require_react());
var context4 = React38.createContext(null);
context4.displayName = "InputGroupContext";
var InputGroupContext_default = context4;

// node_modules/react-bootstrap/esm/NavbarContext.js
var React39 = __toESM(require_react());
var context5 = React39.createContext(null);
context5.displayName = "NavbarContext";
var NavbarContext_default = context5;

// node_modules/react-bootstrap/esm/useWrappedRefWithWarning.js
var import_invariant = __toESM(require_browser());
var import_react25 = __toESM(require_react());
function useWrappedRefWithWarning(ref, componentName) {
  if (false)
    return ref;
  const warningRef = (0, import_react25.useCallback)((refValue) => {
    !(refValue == null || !refValue.isReactComponent) ? true ? (0, import_invariant.default)(false, `${componentName} injected a ref to a provided \`as\` component that resolved to a component instance instead of a DOM element. Use \`React.forwardRef\` to provide the injected ref to the class component as a prop in order to pass it directly to a DOM element`) : (0, import_invariant.default)(false) : void 0;
  }, [componentName]);
  return useMergedRefs_default(warningRef, ref);
}

// node_modules/react-bootstrap/esm/types.js
var import_prop_types2 = __toESM(require_prop_types());
var alignDirection = import_prop_types2.default.oneOf(["start", "end"]);
var alignPropType = import_prop_types2.default.oneOfType([alignDirection, import_prop_types2.default.shape({
  sm: alignDirection
}), import_prop_types2.default.shape({
  md: alignDirection
}), import_prop_types2.default.shape({
  lg: alignDirection
}), import_prop_types2.default.shape({
  xl: alignDirection
}), import_prop_types2.default.shape({
  xxl: alignDirection
}), import_prop_types2.default.object]);

// node_modules/react-bootstrap/esm/DropdownMenu.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var defaultProps13 = {
  flip: true
};
function getDropdownMenuPlacement(alignEnd, dropDirection, isRTL) {
  const topStart = isRTL ? "top-end" : "top-start";
  const topEnd = isRTL ? "top-start" : "top-end";
  const bottomStart = isRTL ? "bottom-end" : "bottom-start";
  const bottomEnd = isRTL ? "bottom-start" : "bottom-end";
  const leftStart = isRTL ? "right-start" : "left-start";
  const leftEnd = isRTL ? "right-end" : "left-end";
  const rightStart = isRTL ? "left-start" : "right-start";
  const rightEnd = isRTL ? "left-end" : "right-end";
  let placement = alignEnd ? bottomEnd : bottomStart;
  if (dropDirection === "up")
    placement = alignEnd ? topEnd : topStart;
  else if (dropDirection === "end")
    placement = alignEnd ? rightEnd : rightStart;
  else if (dropDirection === "start")
    placement = alignEnd ? leftEnd : leftStart;
  return placement;
}
var DropdownMenu2 = React40.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    align,
    rootCloseEvent,
    flip,
    show: showProps,
    renderOnMount,
    as: Component = "div",
    popperConfig,
    variant
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "align",
    "rootCloseEvent",
    "flip",
    "show",
    "renderOnMount",
    "as",
    "popperConfig",
    "variant"
  ]);
  let alignEnd = false;
  const isNavbar = (0, import_react26.useContext)(NavbarContext_default);
  const prefix = useBootstrapPrefix(bsPrefix, "dropdown-menu");
  const {
    align: contextAlign,
    drop,
    isRTL
  } = (0, import_react26.useContext)(DropdownContext_default2);
  align = align || contextAlign;
  const isInputGroup = (0, import_react26.useContext)(InputGroupContext_default);
  const alignClasses = [];
  if (align) {
    if (typeof align === "object") {
      const keys = Object.keys(align);
      true ? (0, import_warning.default)(keys.length === 1, "There should only be 1 breakpoint when passing an object to `align`") : void 0;
      if (keys.length) {
        const brkPoint = keys[0];
        const direction = align[brkPoint];
        alignEnd = direction === "start";
        alignClasses.push(`${prefix}-${brkPoint}-${direction}`);
      }
    } else if (align === "end") {
      alignEnd = true;
    }
  }
  const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);
  const [menuProps, {
    hasShown,
    popper,
    show,
    toggle
  }] = useDropdownMenu({
    flip,
    rootCloseEvent,
    show: showProps,
    usePopper: !isNavbar && alignClasses.length === 0,
    offset: [0, 2],
    popperConfig,
    placement
  });
  menuProps.ref = useMergedRefs_default(useWrappedRefWithWarning(ref, "DropdownMenu"), menuProps.ref);
  useIsomorphicEffect_default(() => {
    if (show)
      popper == null ? void 0 : popper.update();
  }, [show]);
  if (!hasShown && !renderOnMount && !isInputGroup)
    return null;
  if (typeof Component !== "string") {
    menuProps.show = show;
    menuProps.close = () => toggle == null ? void 0 : toggle(false);
    menuProps.align = align;
  }
  let style = props.style;
  if (popper != null && popper.placement) {
    style = __spreadValues(__spreadValues({}, props.style), menuProps.style);
    props["x-placement"] = popper.placement;
  }
  return (0, import_jsx_runtime35.jsx)(Component, __spreadProps(__spreadValues(__spreadProps(__spreadValues(__spreadValues({}, props), menuProps), {
    style
  }), (alignClasses.length || isNavbar) && {
    "data-bs-popper": "static"
  }), {
    className: (0, import_classnames24.default)(className, prefix, show && "show", alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)
  }));
});
DropdownMenu2.displayName = "DropdownMenu";
DropdownMenu2.defaultProps = defaultProps13;
var DropdownMenu_default2 = DropdownMenu2;

// node_modules/react-bootstrap/esm/DropdownToggle.js
var import_classnames25 = __toESM(require_classnames());
var React41 = __toESM(require_react());
var import_react27 = __toESM(require_react());
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var DropdownToggle2 = React41.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    split,
    className,
    childBsPrefix,
    as: Component = Button_default2
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "split",
    "className",
    "childBsPrefix",
    "as"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "dropdown-toggle");
  const dropdownContext = (0, import_react27.useContext)(DropdownContext_default);
  const isInputGroup = (0, import_react27.useContext)(InputGroupContext_default);
  if (childBsPrefix !== void 0) {
    props.bsPrefix = childBsPrefix;
  }
  const [toggleProps] = useDropdownToggle();
  toggleProps.ref = useMergedRefs_default(toggleProps.ref, useWrappedRefWithWarning(ref, "DropdownToggle"));
  return (0, import_jsx_runtime36.jsx)(Component, __spreadValues(__spreadValues({
    className: (0, import_classnames25.default)(className, prefix, split && `${prefix}-split`, !!isInputGroup && (dropdownContext == null ? void 0 : dropdownContext.show) && "show")
  }, toggleProps), props));
});
DropdownToggle2.displayName = "DropdownToggle";
var DropdownToggle_default2 = DropdownToggle2;

// node_modules/react-bootstrap/esm/Dropdown.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var DropdownHeader = createWithBsPrefix("dropdown-header", {
  defaultProps: {
    role: "heading"
  }
});
var DropdownDivider = createWithBsPrefix("dropdown-divider", {
  Component: "hr",
  defaultProps: {
    role: "separator"
  }
});
var DropdownItemText = createWithBsPrefix("dropdown-item-text", {
  Component: "span"
});
var defaultProps14 = {
  navbar: false,
  align: "start",
  autoClose: true
};
var Dropdown2 = React42.forwardRef((pProps, ref) => {
  const _a = useUncontrolled(pProps, {
    show: "onToggle"
  }), {
    bsPrefix,
    drop,
    show,
    className,
    align,
    onSelect,
    onToggle,
    focusFirstItemOnShow,
    as: Component = "div",
    navbar: _4,
    autoClose
  } = _a, props = __objRest(_a, [
    "bsPrefix",
    "drop",
    "show",
    "className",
    "align",
    "onSelect",
    "onToggle",
    "focusFirstItemOnShow",
    "as",
    "navbar",
    "autoClose"
  ]);
  const isInputGroup = (0, import_react28.useContext)(InputGroupContext_default);
  const prefix = useBootstrapPrefix(bsPrefix, "dropdown");
  const isRTL = useIsRTL();
  const isClosingPermitted = (source) => {
    if (autoClose === false)
      return source === "click";
    if (autoClose === "inside")
      return source !== "rootClose";
    if (autoClose === "outside")
      return source !== "select";
    return true;
  };
  const handleToggle = useEventCallback((nextShow, meta) => {
    if (meta.originalEvent.currentTarget === document && (meta.source !== "keydown" || meta.originalEvent.key === "Escape"))
      meta.source = "rootClose";
    if (isClosingPermitted(meta.source))
      onToggle == null ? void 0 : onToggle(nextShow, meta);
  });
  const alignEnd = align === "end";
  const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);
  const contextValue = (0, import_react28.useMemo)(() => ({
    align,
    drop,
    isRTL
  }), [align, drop, isRTL]);
  return (0, import_jsx_runtime37.jsx)(DropdownContext_default2.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime37.jsx)(Dropdown_default, {
      placement,
      show,
      onSelect,
      onToggle: handleToggle,
      focusFirstItemOnShow,
      itemSelector: `.${prefix}-item:not(.disabled):not(:disabled)`,
      children: isInputGroup ? props.children : (0, import_jsx_runtime37.jsx)(Component, __spreadProps(__spreadValues({}, props), {
        ref,
        className: (0, import_classnames26.default)(className, show && "show", (!drop || drop === "down") && prefix, drop === "up" && "dropup", drop === "end" && "dropend", drop === "start" && "dropstart")
      }))
    })
  });
});
Dropdown2.displayName = "Dropdown";
Dropdown2.defaultProps = defaultProps14;
var Dropdown_default2 = Object.assign(Dropdown2, {
  Toggle: DropdownToggle_default2,
  Menu: DropdownMenu_default2,
  Item: DropdownItem_default2,
  ItemText: DropdownItemText,
  Divider: DropdownDivider,
  Header: DropdownHeader
});

// node_modules/react-bootstrap/esm/DropdownButton.js
var React43 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var propTypes2 = {
  id: import_prop_types3.default.string,
  href: import_prop_types3.default.string,
  onClick: import_prop_types3.default.func,
  title: import_prop_types3.default.node.isRequired,
  disabled: import_prop_types3.default.bool,
  align: alignPropType,
  menuRole: import_prop_types3.default.string,
  renderMenuOnMount: import_prop_types3.default.bool,
  rootCloseEvent: import_prop_types3.default.string,
  menuVariant: import_prop_types3.default.oneOf(["dark"]),
  bsPrefix: import_prop_types3.default.string,
  variant: import_prop_types3.default.string,
  size: import_prop_types3.default.string
};
var DropdownButton = React43.forwardRef((_a, ref) => {
  var _b = _a, {
    title,
    children,
    bsPrefix,
    rootCloseEvent,
    variant,
    size: size2,
    menuRole,
    renderMenuOnMount,
    disabled,
    href,
    id,
    menuVariant
  } = _b, props = __objRest(_b, [
    "title",
    "children",
    "bsPrefix",
    "rootCloseEvent",
    "variant",
    "size",
    "menuRole",
    "renderMenuOnMount",
    "disabled",
    "href",
    "id",
    "menuVariant"
  ]);
  return (0, import_jsx_runtime39.jsxs)(Dropdown_default2, __spreadProps(__spreadValues({
    ref
  }, props), {
    children: [(0, import_jsx_runtime38.jsx)(DropdownToggle_default2, {
      id,
      href,
      size: size2,
      variant,
      disabled,
      childBsPrefix: bsPrefix,
      children: title
    }), (0, import_jsx_runtime38.jsx)(DropdownMenu_default2, {
      role: menuRole,
      renderOnMount: renderMenuOnMount,
      rootCloseEvent,
      variant: menuVariant,
      children
    })]
  }));
});
DropdownButton.displayName = "DropdownButton";
DropdownButton.propTypes = propTypes2;
var DropdownButton_default = DropdownButton;

// node_modules/react-bootstrap/esm/Form.js
var import_classnames37 = __toESM(require_classnames());
var import_prop_types5 = __toESM(require_prop_types());
var React57 = __toESM(require_react());

// node_modules/react-bootstrap/esm/FormCheck.js
var import_classnames30 = __toESM(require_classnames());
var React48 = __toESM(require_react());
var import_react31 = __toESM(require_react());

// node_modules/react-bootstrap/esm/Feedback.js
var import_classnames27 = __toESM(require_classnames());
var React44 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var propTypes3 = {
  type: import_prop_types4.default.string,
  tooltip: import_prop_types4.default.bool,
  as: import_prop_types4.default.elementType
};
var Feedback = React44.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "div",
    className,
    type = "valid",
    tooltip = false
  } = _b, props = __objRest(_b, [
    "as",
    "className",
    "type",
    "tooltip"
  ]);
  return (0, import_jsx_runtime40.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames27.default)(className, `${type}-${tooltip ? "tooltip" : "feedback"}`)
  }));
});
Feedback.displayName = "Feedback";
Feedback.propTypes = propTypes3;
var Feedback_default = Feedback;

// node_modules/react-bootstrap/esm/FormCheckInput.js
var import_classnames28 = __toESM(require_classnames());
var React46 = __toESM(require_react());
var import_react29 = __toESM(require_react());

// node_modules/react-bootstrap/esm/FormContext.js
var React45 = __toESM(require_react());
var FormContext = React45.createContext({});
var FormContext_default = FormContext;

// node_modules/react-bootstrap/esm/FormCheckInput.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var FormCheckInput = React46.forwardRef((_a, ref) => {
  var _b = _a, {
    id,
    bsPrefix,
    className,
    type = "checkbox",
    isValid = false,
    isInvalid = false,
    as: Component = "input"
  } = _b, props = __objRest(_b, [
    "id",
    "bsPrefix",
    "className",
    "type",
    "isValid",
    "isInvalid",
    "as"
  ]);
  const {
    controlId
  } = (0, import_react29.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-check-input");
  return (0, import_jsx_runtime41.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    type,
    id: id || controlId,
    className: (0, import_classnames28.default)(className, bsPrefix, isValid && "is-valid", isInvalid && "is-invalid")
  }));
});
FormCheckInput.displayName = "FormCheckInput";
var FormCheckInput_default = FormCheckInput;

// node_modules/react-bootstrap/esm/FormCheckLabel.js
var import_classnames29 = __toESM(require_classnames());
var React47 = __toESM(require_react());
var import_react30 = __toESM(require_react());
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var FormCheckLabel = React47.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    htmlFor
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "htmlFor"
  ]);
  const {
    controlId
  } = (0, import_react30.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-check-label");
  return (0, import_jsx_runtime42.jsx)("label", __spreadProps(__spreadValues({}, props), {
    ref,
    htmlFor: htmlFor || controlId,
    className: (0, import_classnames29.default)(className, bsPrefix)
  }));
});
FormCheckLabel.displayName = "FormCheckLabel";
var FormCheckLabel_default = FormCheckLabel;

// node_modules/react-bootstrap/esm/FormCheck.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var FormCheck = React48.forwardRef((_a, ref) => {
  var _b = _a, {
    id,
    bsPrefix,
    bsSwitchPrefix,
    inline = false,
    disabled = false,
    isValid = false,
    isInvalid = false,
    feedbackTooltip = false,
    feedback,
    feedbackType,
    className,
    style,
    title = "",
    type = "checkbox",
    label,
    children,
    as = "input"
  } = _b, props = __objRest(_b, [
    "id",
    "bsPrefix",
    "bsSwitchPrefix",
    "inline",
    "disabled",
    "isValid",
    "isInvalid",
    "feedbackTooltip",
    "feedback",
    "feedbackType",
    "className",
    "style",
    "title",
    "type",
    "label",
    "children",
    "as"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-check");
  bsSwitchPrefix = useBootstrapPrefix(bsSwitchPrefix, "form-switch");
  const {
    controlId
  } = (0, import_react31.useContext)(FormContext_default);
  const innerFormContext = (0, import_react31.useMemo)(() => ({
    controlId: id || controlId
  }), [controlId, id]);
  const hasLabel = !children && label != null && label !== false || hasChildOfType(children, FormCheckLabel_default);
  const input = (0, import_jsx_runtime43.jsx)(FormCheckInput_default, __spreadProps(__spreadValues({}, props), {
    type: type === "switch" ? "checkbox" : type,
    ref,
    isValid,
    isInvalid,
    disabled,
    as
  }));
  return (0, import_jsx_runtime43.jsx)(FormContext_default.Provider, {
    value: innerFormContext,
    children: (0, import_jsx_runtime43.jsx)("div", {
      style,
      className: (0, import_classnames30.default)(className, hasLabel && bsPrefix, inline && `${bsPrefix}-inline`, type === "switch" && bsSwitchPrefix),
      children: children || (0, import_jsx_runtime45.jsxs)(import_jsx_runtime44.Fragment, {
        children: [input, hasLabel && (0, import_jsx_runtime43.jsx)(FormCheckLabel_default, {
          title,
          children: label
        }), feedback && (0, import_jsx_runtime43.jsx)(Feedback_default, {
          type: feedbackType,
          tooltip: feedbackTooltip,
          children: feedback
        })]
      })
    })
  });
});
FormCheck.displayName = "FormCheck";
var FormCheck_default = Object.assign(FormCheck, {
  Input: FormCheckInput_default,
  Label: FormCheckLabel_default
});

// node_modules/react-bootstrap/esm/FormControl.js
var import_classnames31 = __toESM(require_classnames());
var React49 = __toESM(require_react());
var import_react32 = __toESM(require_react());
var import_warning2 = __toESM(require_warning());
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var FormControl = React49.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    type,
    size: size2,
    htmlSize,
    id,
    className,
    isValid = false,
    isInvalid = false,
    plaintext,
    readOnly,
    as: Component = "input"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "type",
    "size",
    "htmlSize",
    "id",
    "className",
    "isValid",
    "isInvalid",
    "plaintext",
    "readOnly",
    "as"
  ]);
  const {
    controlId
  } = (0, import_react32.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-control");
  let classes;
  if (plaintext) {
    classes = {
      [`${bsPrefix}-plaintext`]: true
    };
  } else {
    classes = {
      [bsPrefix]: true,
      [`${bsPrefix}-${size2}`]: size2
    };
  }
  true ? (0, import_warning2.default)(controlId == null || !id, "`controlId` is ignored on `<FormControl>` when `id` is specified.") : void 0;
  return (0, import_jsx_runtime46.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    type,
    size: htmlSize,
    ref,
    readOnly,
    id: id || controlId,
    className: (0, import_classnames31.default)(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === "color" && `${bsPrefix}-color`)
  }));
});
FormControl.displayName = "FormControl";
var FormControl_default = Object.assign(FormControl, {
  Feedback: Feedback_default
});

// node_modules/react-bootstrap/esm/FormFloating.js
var FormFloating_default = createWithBsPrefix("form-floating");

// node_modules/react-bootstrap/esm/FormGroup.js
var React50 = __toESM(require_react());
var import_react33 = __toESM(require_react());
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var FormGroup = React50.forwardRef((_a, ref) => {
  var _b = _a, {
    controlId,
    as: Component = "div"
  } = _b, props = __objRest(_b, [
    "controlId",
    "as"
  ]);
  const context6 = (0, import_react33.useMemo)(() => ({
    controlId
  }), [controlId]);
  return (0, import_jsx_runtime47.jsx)(FormContext_default.Provider, {
    value: context6,
    children: (0, import_jsx_runtime47.jsx)(Component, __spreadProps(__spreadValues({}, props), {
      ref
    }))
  });
});
FormGroup.displayName = "FormGroup";
var FormGroup_default = FormGroup;

// node_modules/react-bootstrap/esm/FormLabel.js
var import_classnames32 = __toESM(require_classnames());
var React51 = __toESM(require_react());
var import_react34 = __toESM(require_react());
var import_warning3 = __toESM(require_warning());
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var defaultProps15 = {
  column: false,
  visuallyHidden: false
};
var FormLabel = React51.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "label",
    bsPrefix,
    column,
    visuallyHidden,
    className,
    htmlFor
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "column",
    "visuallyHidden",
    "className",
    "htmlFor"
  ]);
  const {
    controlId
  } = (0, import_react34.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-label");
  let columnClass = "col-form-label";
  if (typeof column === "string")
    columnClass = `${columnClass} ${columnClass}-${column}`;
  const classes = (0, import_classnames32.default)(className, bsPrefix, visuallyHidden && "visually-hidden", column && columnClass);
  true ? (0, import_warning3.default)(controlId == null || !htmlFor, "`controlId` is ignored on `<FormLabel>` when `htmlFor` is specified.") : void 0;
  htmlFor = htmlFor || controlId;
  if (column)
    return (0, import_jsx_runtime48.jsx)(Col_default, __spreadValues({
      ref,
      as: "label",
      className: classes,
      htmlFor
    }, props));
  return (0, import_jsx_runtime48.jsx)(Component, __spreadValues({
    ref,
    className: classes,
    htmlFor
  }, props));
});
FormLabel.displayName = "FormLabel";
FormLabel.defaultProps = defaultProps15;
var FormLabel_default = FormLabel;

// node_modules/react-bootstrap/esm/FormRange.js
var import_classnames33 = __toESM(require_classnames());
var React52 = __toESM(require_react());
var import_react35 = __toESM(require_react());
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var FormRange = React52.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    id
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "id"
  ]);
  const {
    controlId
  } = (0, import_react35.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-range");
  return (0, import_jsx_runtime49.jsx)("input", __spreadProps(__spreadValues({}, props), {
    type: "range",
    ref,
    className: (0, import_classnames33.default)(className, bsPrefix),
    id: id || controlId
  }));
});
FormRange.displayName = "FormRange";
var FormRange_default = FormRange;

// node_modules/react-bootstrap/esm/FormSelect.js
var import_classnames34 = __toESM(require_classnames());
var React53 = __toESM(require_react());
var import_react36 = __toESM(require_react());
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var FormSelect = React53.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    size: size2,
    htmlSize,
    className,
    isValid = false,
    isInvalid = false,
    id
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "size",
    "htmlSize",
    "className",
    "isValid",
    "isInvalid",
    "id"
  ]);
  const {
    controlId
  } = (0, import_react36.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-select");
  return (0, import_jsx_runtime50.jsx)("select", __spreadProps(__spreadValues({}, props), {
    size: htmlSize,
    ref,
    className: (0, import_classnames34.default)(className, bsPrefix, size2 && `${bsPrefix}-${size2}`, isValid && `is-valid`, isInvalid && `is-invalid`),
    id: id || controlId
  }));
});
FormSelect.displayName = "FormSelect";
var FormSelect_default = FormSelect;

// node_modules/react-bootstrap/esm/FormText.js
var import_classnames35 = __toESM(require_classnames());
var React54 = __toESM(require_react());
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var FormText = React54.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    as: Component = "small",
    muted
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "as",
    "muted"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-text");
  return (0, import_jsx_runtime51.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames35.default)(className, bsPrefix, muted && "text-muted")
  }));
});
FormText.displayName = "FormText";
var FormText_default = FormText;

// node_modules/react-bootstrap/esm/Switch.js
var React55 = __toESM(require_react());
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var Switch = React55.forwardRef((props, ref) => (0, import_jsx_runtime52.jsx)(FormCheck_default, __spreadProps(__spreadValues({}, props), {
  ref,
  type: "switch"
})));
Switch.displayName = "Switch";
var Switch_default = Object.assign(Switch, {
  Input: FormCheck_default.Input,
  Label: FormCheck_default.Label
});

// node_modules/react-bootstrap/esm/FloatingLabel.js
var import_classnames36 = __toESM(require_classnames());
var React56 = __toESM(require_react());
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var FloatingLabel = React56.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    children,
    controlId,
    label
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "children",
    "controlId",
    "label"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-floating");
  return (0, import_jsx_runtime54.jsxs)(FormGroup_default, __spreadProps(__spreadValues({
    ref,
    className: (0, import_classnames36.default)(className, bsPrefix),
    controlId
  }, props), {
    children: [children, (0, import_jsx_runtime53.jsx)("label", {
      htmlFor: controlId,
      children: label
    })]
  }));
});
FloatingLabel.displayName = "FloatingLabel";
var FloatingLabel_default = FloatingLabel;

// node_modules/react-bootstrap/esm/Form.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var propTypes4 = {
  _ref: import_prop_types5.default.any,
  validated: import_prop_types5.default.bool,
  as: import_prop_types5.default.elementType
};
var Form = React57.forwardRef((_a, ref) => {
  var _b = _a, {
    className,
    validated,
    as: Component = "form"
  } = _b, props = __objRest(_b, [
    "className",
    "validated",
    "as"
  ]);
  return (0, import_jsx_runtime55.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames37.default)(className, validated && "was-validated")
  }));
});
Form.displayName = "Form";
Form.propTypes = propTypes4;
var Form_default = Object.assign(Form, {
  Group: FormGroup_default,
  Control: FormControl_default,
  Floating: FormFloating_default,
  Check: FormCheck_default,
  Switch: Switch_default,
  Label: FormLabel_default,
  Text: FormText_default,
  Range: FormRange_default,
  Select: FormSelect_default,
  FloatingLabel: FloatingLabel_default
});

// node_modules/react-bootstrap/esm/Container.js
var import_classnames38 = __toESM(require_classnames());
var React58 = __toESM(require_react());
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var defaultProps16 = {
  fluid: false
};
var Container = React58.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    fluid,
    as: Component = "div",
    className
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "fluid",
    "as",
    "className"
  ]);
  const prefix = useBootstrapPrefix(bsPrefix, "container");
  const suffix = typeof fluid === "string" ? `-${fluid}` : "-fluid";
  return (0, import_jsx_runtime56.jsx)(Component, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames38.default)(className, fluid ? `${prefix}${suffix}` : prefix)
  }));
});
Container.displayName = "Container";
Container.defaultProps = defaultProps16;
var Container_default = Container;

// node_modules/react-bootstrap/esm/Image.js
var import_classnames39 = __toESM(require_classnames());
var React59 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var propTypes5 = {
  bsPrefix: import_prop_types6.default.string,
  fluid: import_prop_types6.default.bool,
  rounded: import_prop_types6.default.bool,
  roundedCircle: import_prop_types6.default.bool,
  thumbnail: import_prop_types6.default.bool
};
var defaultProps17 = {
  fluid: false,
  rounded: false,
  roundedCircle: false,
  thumbnail: false
};
var Image2 = React59.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    fluid,
    rounded,
    roundedCircle,
    thumbnail
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "fluid",
    "rounded",
    "roundedCircle",
    "thumbnail"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "img");
  return (0, import_jsx_runtime57.jsx)("img", __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames39.default)(className, fluid && `${bsPrefix}-fluid`, rounded && `rounded`, roundedCircle && `rounded-circle`, thumbnail && `${bsPrefix}-thumbnail`)
  }));
});
Image2.displayName = "Image";
Image2.defaultProps = defaultProps17;
var Image_default = Image2;

// node_modules/react-bootstrap/esm/FigureImage.js
var import_classnames40 = __toESM(require_classnames());
var React60 = __toESM(require_react());
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var defaultProps18 = {
  fluid: true
};
var FigureImage = React60.forwardRef((_a, ref) => {
  var _b = _a, {
    className
  } = _b, props = __objRest(_b, [
    "className"
  ]);
  return (0, import_jsx_runtime58.jsx)(Image_default, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames40.default)(className, "figure-img")
  }));
});
FigureImage.displayName = "FigureImage";
FigureImage.propTypes = propTypes5;
FigureImage.defaultProps = defaultProps18;
var FigureImage_default = FigureImage;

// node_modules/react-bootstrap/esm/FigureCaption.js
var FigureCaption = createWithBsPrefix("figure-caption", {
  Component: "figcaption"
});
var FigureCaption_default = FigureCaption;

// node_modules/react-bootstrap/esm/Figure.js
var Figure = createWithBsPrefix("figure", {
  Component: "figure"
});
var Figure_default = Object.assign(Figure, {
  Image: FigureImage_default,
  Caption: FigureCaption_default
});

// node_modules/react-bootstrap/esm/InputGroup.js
var import_classnames41 = __toESM(require_classnames());
var React61 = __toESM(require_react());
var import_react37 = __toESM(require_react());
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var InputGroupText = createWithBsPrefix("input-group-text", {
  Component: "span"
});
var InputGroupCheckbox = (props) => (0, import_jsx_runtime59.jsx)(InputGroupText, {
  children: (0, import_jsx_runtime59.jsx)(FormCheckInput_default, __spreadValues({
    type: "checkbox"
  }, props))
});
var InputGroupRadio = (props) => (0, import_jsx_runtime59.jsx)(InputGroupText, {
  children: (0, import_jsx_runtime59.jsx)(FormCheckInput_default, __spreadValues({
    type: "radio"
  }, props))
});
var InputGroup = React61.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    size: size2,
    hasValidation,
    className,
    as: Component = "div"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "size",
    "hasValidation",
    "className",
    "as"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "input-group");
  const contextValue = (0, import_react37.useMemo)(() => ({}), []);
  return (0, import_jsx_runtime59.jsx)(InputGroupContext_default.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime59.jsx)(Component, __spreadProps(__spreadValues({
      ref
    }, props), {
      className: (0, import_classnames41.default)(className, bsPrefix, size2 && `${bsPrefix}-${size2}`, hasValidation && "has-validation")
    }))
  });
});
InputGroup.displayName = "InputGroup";
var InputGroup_default = Object.assign(InputGroup, {
  Text: InputGroupText,
  Radio: InputGroupRadio,
  Checkbox: InputGroupCheckbox
});

// node_modules/react-bootstrap/esm/ListGroup.js
var import_classnames43 = __toESM(require_classnames());
var React66 = __toESM(require_react());
var import_warning4 = __toESM(require_warning());

// node_modules/@restart/ui/esm/Nav.js
var React64 = __toESM(require_react());
var import_react39 = __toESM(require_react());

// node_modules/@restart/ui/esm/TabContext.js
var React62 = __toESM(require_react());
var TabContext = React62.createContext(null);
var TabContext_default = TabContext;

// node_modules/@restart/ui/esm/NavItem.js
var React63 = __toESM(require_react());
var import_react38 = __toESM(require_react());
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
var _excluded5 = ["as", "active", "eventKey"];
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useNavItem({
  key,
  onClick,
  active,
  id,
  role,
  disabled
}) {
  const parentOnSelect = (0, import_react38.useContext)(SelectableContext_default);
  const navContext = (0, import_react38.useContext)(NavContext_default);
  const tabContext = (0, import_react38.useContext)(TabContext_default);
  let isActive = active;
  const props = {
    role
  };
  if (navContext) {
    if (!role && navContext.role === "tablist")
      props.role = "tab";
    const contextControllerId = navContext.getControllerId(key != null ? key : null);
    const contextControlledId = navContext.getControlledId(key != null ? key : null);
    props[dataAttr("event-key")] = key;
    props.id = contextControllerId || id;
    isActive = active == null && key != null ? navContext.activeKey === key : active;
    if (isActive || !(tabContext != null && tabContext.unmountOnExit) && !(tabContext != null && tabContext.mountOnEnter))
      props["aria-controls"] = contextControlledId;
  }
  if (props.role === "tab") {
    if (disabled) {
      props.tabIndex = -1;
      props["aria-disabled"] = true;
    }
    if (isActive) {
      props["aria-selected"] = isActive;
    } else {
      props.tabIndex = -1;
    }
  }
  props.onClick = useEventCallback((e) => {
    if (disabled)
      return;
    onClick == null ? void 0 : onClick(e);
    if (key == null) {
      return;
    }
    if (parentOnSelect && !e.isPropagationStopped()) {
      parentOnSelect(key, e);
    }
  });
  return [props, {
    isActive
  }];
}
var NavItem = React63.forwardRef((_ref, ref) => {
  let {
    as: Component = Button_default,
    active,
    eventKey
  } = _ref, options = _objectWithoutPropertiesLoose5(_ref, _excluded5);
  const [props, meta] = useNavItem(Object.assign({
    key: makeEventKey(eventKey, options.href),
    active
  }, options));
  props[dataAttr("active")] = meta.isActive;
  return (0, import_jsx_runtime60.jsx)(Component, Object.assign({}, options, props, {
    ref
  }));
});
NavItem.displayName = "NavItem";
var NavItem_default = NavItem;

// node_modules/@restart/ui/esm/Nav.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var _excluded6 = ["as", "onSelect", "activeKey", "role", "onKeyDown"];
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var noop3 = () => {
};
var EVENT_KEY_ATTR = dataAttr("event-key");
var Nav = React64.forwardRef((_ref, ref) => {
  let {
    as: Component = "div",
    onSelect,
    activeKey,
    role,
    onKeyDown
  } = _ref, props = _objectWithoutPropertiesLoose6(_ref, _excluded6);
  const forceUpdate = useForceUpdate();
  const needsRefocusRef = (0, import_react39.useRef)(false);
  const parentOnSelect = (0, import_react39.useContext)(SelectableContext_default);
  const tabContext = (0, import_react39.useContext)(TabContext_default);
  let getControlledId, getControllerId;
  if (tabContext) {
    role = role || "tablist";
    activeKey = tabContext.activeKey;
    getControlledId = tabContext.getControlledId;
    getControllerId = tabContext.getControllerId;
  }
  const listNode = (0, import_react39.useRef)(null);
  const getNextActiveTab = (offset) => {
    const currentListNode = listNode.current;
    if (!currentListNode)
      return null;
    const items = qsa(currentListNode, `[${EVENT_KEY_ATTR}]:not([aria-disabled=true])`);
    const activeChild = currentListNode.querySelector("[aria-selected=true]");
    if (!activeChild || activeChild !== document.activeElement)
      return null;
    const index = items.indexOf(activeChild);
    if (index === -1)
      return null;
    let nextIndex = index + offset;
    if (nextIndex >= items.length)
      nextIndex = 0;
    if (nextIndex < 0)
      nextIndex = items.length - 1;
    return items[nextIndex];
  };
  const handleSelect = (key, event) => {
    if (key == null)
      return;
    onSelect == null ? void 0 : onSelect(key, event);
    parentOnSelect == null ? void 0 : parentOnSelect(key, event);
  };
  const handleKeyDown = (event) => {
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (!tabContext) {
      return;
    }
    let nextActiveChild;
    switch (event.key) {
      case "ArrowLeft":
      case "ArrowUp":
        nextActiveChild = getNextActiveTab(-1);
        break;
      case "ArrowRight":
      case "ArrowDown":
        nextActiveChild = getNextActiveTab(1);
        break;
      default:
        return;
    }
    if (!nextActiveChild)
      return;
    event.preventDefault();
    handleSelect(nextActiveChild.dataset[dataProp("EventKey")] || null, event);
    needsRefocusRef.current = true;
    forceUpdate();
  };
  (0, import_react39.useEffect)(() => {
    if (listNode.current && needsRefocusRef.current) {
      const activeChild = listNode.current.querySelector(`[${EVENT_KEY_ATTR}][aria-selected=true]`);
      activeChild == null ? void 0 : activeChild.focus();
    }
    needsRefocusRef.current = false;
  });
  const mergedRef = useMergedRefs_default(ref, listNode);
  return (0, import_jsx_runtime61.jsx)(SelectableContext_default.Provider, {
    value: handleSelect,
    children: (0, import_jsx_runtime61.jsx)(NavContext_default.Provider, {
      value: {
        role,
        activeKey: makeEventKey(activeKey),
        getControlledId: getControlledId || noop3,
        getControllerId: getControllerId || noop3
      },
      children: (0, import_jsx_runtime61.jsx)(Component, Object.assign({}, props, {
        onKeyDown: handleKeyDown,
        ref: mergedRef,
        role
      }))
    })
  });
});
Nav.displayName = "Nav";
var Nav_default = Object.assign(Nav, {
  Item: NavItem_default
});

// node_modules/react-bootstrap/esm/ListGroupItem.js
var import_classnames42 = __toESM(require_classnames());
var React65 = __toESM(require_react());
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
var ListGroupItem = React65.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    active,
    disabled,
    eventKey,
    className,
    variant,
    action,
    as
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "active",
    "disabled",
    "eventKey",
    "className",
    "variant",
    "action",
    "as"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "list-group-item");
  const [navItemProps, meta] = useNavItem(__spreadValues({
    key: makeEventKey(eventKey, props.href),
    active
  }, props));
  const handleClick = useEventCallback((event) => {
    if (disabled) {
      event.preventDefault();
      event.stopPropagation();
      return;
    }
    navItemProps.onClick(event);
  });
  if (disabled && props.tabIndex === void 0) {
    props.tabIndex = -1;
    props["aria-disabled"] = true;
  }
  const Component = as || (action ? props.href ? "a" : "button" : "div");
  return (0, import_jsx_runtime62.jsx)(Component, __spreadProps(__spreadValues(__spreadValues({
    ref
  }, props), navItemProps), {
    onClick: handleClick,
    className: (0, import_classnames42.default)(className, bsPrefix, meta.isActive && "active", disabled && "disabled", variant && `${bsPrefix}-${variant}`, action && `${bsPrefix}-action`)
  }));
});
ListGroupItem.displayName = "ListGroupItem";
var ListGroupItem_default = ListGroupItem;

// node_modules/react-bootstrap/esm/ListGroup.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
var ListGroup = React66.forwardRef((props, ref) => {
  const _a = useUncontrolled(props, {
    activeKey: "onSelect"
  }), {
    className,
    bsPrefix: initialBsPrefix,
    variant,
    horizontal,
    numbered,
    as = "div"
  } = _a, controlledProps = __objRest(_a, [
    "className",
    "bsPrefix",
    "variant",
    "horizontal",
    "numbered",
    "as"
  ]);
  const bsPrefix = useBootstrapPrefix(initialBsPrefix, "list-group");
  let horizontalVariant;
  if (horizontal) {
    horizontalVariant = horizontal === true ? "horizontal" : `horizontal-${horizontal}`;
  }
  true ? (0, import_warning4.default)(!(horizontal && variant === "flush"), '`variant="flush"` and `horizontal` should not be used together.') : void 0;
  return (0, import_jsx_runtime63.jsx)(Nav_default, __spreadProps(__spreadValues({
    ref
  }, controlledProps), {
    as,
    className: (0, import_classnames43.default)(className, bsPrefix, variant && `${bsPrefix}-${variant}`, horizontalVariant && `${bsPrefix}-${horizontalVariant}`, numbered && `${bsPrefix}-numbered`)
  }));
});
ListGroup.displayName = "ListGroup";
var ListGroup_default = Object.assign(ListGroup, {
  Item: ListGroupItem_default
});

// node_modules/react-bootstrap/esm/Modal.js
var import_classnames46 = __toESM(require_classnames());

// node_modules/dom-helpers/esm/scrollbarSize.js
var size;
function scrollbarSize(recalc) {
  if (!size && size !== 0 || recalc) {
    if (canUseDOM_default) {
      var scrollDiv = document.createElement("div");
      scrollDiv.style.position = "absolute";
      scrollDiv.style.top = "-9999px";
      scrollDiv.style.width = "50px";
      scrollDiv.style.height = "50px";
      scrollDiv.style.overflow = "scroll";
      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }
  return size;
}

// node_modules/react-bootstrap/esm/Modal.js
var React72 = __toESM(require_react());
var import_react42 = __toESM(require_react());

// node_modules/dom-helpers/esm/activeElement.js
function activeElement(doc) {
  if (doc === void 0) {
    doc = ownerDocument();
  }
  try {
    var active = doc.activeElement;
    if (!active || !active.nodeName)
      return null;
    return active;
  } catch (e) {
    return doc.body;
  }
}

// node_modules/@restart/ui/esm/Modal.js
var import_react40 = __toESM(require_react());
var React67 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@restart/ui/esm/getScrollbarWidth.js
function getBodyScrollbarWidth(ownerDocument2 = document) {
  const window2 = ownerDocument2.defaultView;
  return Math.abs(window2.innerWidth - ownerDocument2.documentElement.clientWidth);
}

// node_modules/@restart/ui/esm/ModalManager.js
var OPEN_DATA_ATTRIBUTE = dataAttr("modal-open");
var ModalManager = class {
  constructor({
    ownerDocument: ownerDocument2,
    handleContainerOverflow = true,
    isRTL = false
  } = {}) {
    this.handleContainerOverflow = handleContainerOverflow;
    this.isRTL = isRTL;
    this.modals = [];
    this.ownerDocument = ownerDocument2;
  }
  getScrollbarWidth() {
    return getBodyScrollbarWidth(this.ownerDocument);
  }
  getElement() {
    return (this.ownerDocument || document).body;
  }
  setModalAttributes(_modal) {
  }
  removeModalAttributes(_modal) {
  }
  setContainerStyle(containerState) {
    const style = {
      overflow: "hidden"
    };
    const paddingProp = this.isRTL ? "paddingLeft" : "paddingRight";
    const container = this.getElement();
    containerState.style = {
      overflow: container.style.overflow,
      [paddingProp]: container.style[paddingProp]
    };
    if (containerState.scrollBarWidth) {
      style[paddingProp] = `${parseInt(css_default(container, paddingProp) || "0", 10) + containerState.scrollBarWidth}px`;
    }
    container.setAttribute(OPEN_DATA_ATTRIBUTE, "");
    css_default(container, style);
  }
  reset() {
    [...this.modals].forEach((m) => this.remove(m));
  }
  removeContainerStyle(containerState) {
    const container = this.getElement();
    container.removeAttribute(OPEN_DATA_ATTRIBUTE);
    Object.assign(container.style, containerState.style);
  }
  add(modal) {
    let modalIdx = this.modals.indexOf(modal);
    if (modalIdx !== -1) {
      return modalIdx;
    }
    modalIdx = this.modals.length;
    this.modals.push(modal);
    this.setModalAttributes(modal);
    if (modalIdx !== 0) {
      return modalIdx;
    }
    this.state = {
      scrollBarWidth: this.getScrollbarWidth(),
      style: {}
    };
    if (this.handleContainerOverflow) {
      this.setContainerStyle(this.state);
    }
    return modalIdx;
  }
  remove(modal) {
    const modalIdx = this.modals.indexOf(modal);
    if (modalIdx === -1) {
      return;
    }
    this.modals.splice(modalIdx, 1);
    if (!this.modals.length && this.handleContainerOverflow) {
      this.removeContainerStyle(this.state);
    }
    this.removeModalAttributes(modal);
  }
  isTopModal(modal) {
    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
  }
};
var ModalManager_default = ModalManager;

// node_modules/@restart/ui/esm/Modal.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var _excluded7 = ["show", "role", "className", "style", "children", "backdrop", "keyboard", "onBackdropClick", "onEscapeKeyDown", "transition", "backdropTransition", "autoFocus", "enforceFocus", "restoreFocus", "restoreFocusOptions", "renderDialog", "renderBackdrop", "manager", "container", "onShow", "onHide", "onExit", "onExited", "onExiting", "onEnter", "onEntering", "onEntered"];
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var manager;
function getManager(window2) {
  if (!manager)
    manager = new ModalManager_default({
      ownerDocument: window2 == null ? void 0 : window2.document
    });
  return manager;
}
function useModalManager(provided) {
  const window2 = useWindow();
  const modalManager = provided || getManager(window2);
  const modal = (0, import_react40.useRef)({
    dialog: null,
    backdrop: null
  });
  return Object.assign(modal.current, {
    add: () => modalManager.add(modal.current),
    remove: () => modalManager.remove(modal.current),
    isTopModal: () => modalManager.isTopModal(modal.current),
    setDialogRef: (0, import_react40.useCallback)((ref) => {
      modal.current.dialog = ref;
    }, []),
    setBackdropRef: (0, import_react40.useCallback)((ref) => {
      modal.current.backdrop = ref;
    }, [])
  });
}
var Modal = (0, import_react40.forwardRef)((_ref, ref) => {
  let {
    show = false,
    role = "dialog",
    className,
    style,
    children,
    backdrop = true,
    keyboard = true,
    onBackdropClick,
    onEscapeKeyDown,
    transition,
    backdropTransition,
    autoFocus = true,
    enforceFocus = true,
    restoreFocus = true,
    restoreFocusOptions,
    renderDialog,
    renderBackdrop = (props) => (0, import_jsx_runtime64.jsx)("div", Object.assign({}, props)),
    manager: providedManager,
    container: containerRef,
    onShow,
    onHide = () => {
    },
    onExit,
    onExited,
    onExiting,
    onEnter,
    onEntering,
    onEntered
  } = _ref, rest = _objectWithoutPropertiesLoose7(_ref, _excluded7);
  const container = useWaitForDOMRef(containerRef);
  const modal = useModalManager(providedManager);
  const isMounted = useMounted();
  const prevShow = usePrevious(show);
  const [exited, setExited] = (0, import_react40.useState)(!show);
  const lastFocusRef = (0, import_react40.useRef)(null);
  (0, import_react40.useImperativeHandle)(ref, () => modal, [modal]);
  if (canUseDOM_default && !prevShow && show) {
    lastFocusRef.current = activeElement();
  }
  if (!transition && !show && !exited) {
    setExited(true);
  } else if (show && exited) {
    setExited(false);
  }
  const handleShow = useEventCallback(() => {
    modal.add();
    removeKeydownListenerRef.current = listen_default(document, "keydown", handleDocumentKeyDown);
    removeFocusListenerRef.current = listen_default(document, "focus", () => setTimeout(handleEnforceFocus), true);
    if (onShow) {
      onShow();
    }
    if (autoFocus) {
      const currentActiveElement = activeElement(document);
      if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {
        lastFocusRef.current = currentActiveElement;
        modal.dialog.focus();
      }
    }
  });
  const handleHide = useEventCallback(() => {
    modal.remove();
    removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();
    removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();
    if (restoreFocus) {
      var _lastFocusRef$current;
      (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);
      lastFocusRef.current = null;
    }
  });
  (0, import_react40.useEffect)(() => {
    if (!show || !container)
      return;
    handleShow();
  }, [
    show,
    container,
    handleShow
  ]);
  (0, import_react40.useEffect)(() => {
    if (!exited)
      return;
    handleHide();
  }, [exited, handleHide]);
  useWillUnmount(() => {
    handleHide();
  });
  const handleEnforceFocus = useEventCallback(() => {
    if (!enforceFocus || !isMounted() || !modal.isTopModal()) {
      return;
    }
    const currentActiveElement = activeElement();
    if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {
      modal.dialog.focus();
    }
  });
  const handleBackdropClick = useEventCallback((e) => {
    if (e.target !== e.currentTarget) {
      return;
    }
    onBackdropClick == null ? void 0 : onBackdropClick(e);
    if (backdrop === true) {
      onHide();
    }
  });
  const handleDocumentKeyDown = useEventCallback((e) => {
    if (keyboard && e.keyCode === 27 && modal.isTopModal()) {
      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);
      if (!e.defaultPrevented) {
        onHide();
      }
    }
  });
  const removeFocusListenerRef = (0, import_react40.useRef)();
  const removeKeydownListenerRef = (0, import_react40.useRef)();
  const handleHidden = (...args) => {
    setExited(true);
    onExited == null ? void 0 : onExited(...args);
  };
  const Transition = transition;
  if (!container || !(show || Transition && !exited)) {
    return null;
  }
  const dialogProps = Object.assign({
    role,
    ref: modal.setDialogRef,
    "aria-modal": role === "dialog" ? true : void 0
  }, rest, {
    style,
    className,
    tabIndex: -1
  });
  let dialog = renderDialog ? renderDialog(dialogProps) : (0, import_jsx_runtime64.jsx)("div", Object.assign({}, dialogProps, {
    children: React67.cloneElement(children, {
      role: "document"
    })
  }));
  if (Transition) {
    dialog = (0, import_jsx_runtime64.jsx)(Transition, {
      appear: true,
      unmountOnExit: true,
      in: !!show,
      onExit,
      onExiting,
      onExited: handleHidden,
      onEnter,
      onEntering,
      onEntered,
      children: dialog
    });
  }
  let backdropElement = null;
  if (backdrop) {
    const BackdropTransition3 = backdropTransition;
    backdropElement = renderBackdrop({
      ref: modal.setBackdropRef,
      onClick: handleBackdropClick
    });
    if (BackdropTransition3) {
      backdropElement = (0, import_jsx_runtime64.jsx)(BackdropTransition3, {
        appear: true,
        in: !!show,
        children: backdropElement
      });
    }
  }
  return (0, import_jsx_runtime64.jsx)(import_jsx_runtime65.Fragment, {
    children: import_react_dom.default.createPortal((0, import_jsx_runtime66.jsxs)(import_jsx_runtime65.Fragment, {
      children: [backdropElement, dialog]
    }), container)
  });
});
Modal.displayName = "Modal";
var Modal_default = Object.assign(Modal, {
  Manager: ModalManager_default
});

// node_modules/dom-helpers/esm/addClass.js
function addClass(element, className) {
  if (element.classList)
    element.classList.add(className);
  else if (!hasClass(element, className))
    if (typeof element.className === "string")
      element.className = element.className + " " + className;
    else
      element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}

// node_modules/dom-helpers/esm/removeClass.js
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}

// node_modules/react-bootstrap/esm/BootstrapModalManager.js
var Selector = {
  FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
  STICKY_CONTENT: ".sticky-top",
  NAVBAR_TOGGLER: ".navbar-toggler"
};
var BootstrapModalManager = class extends ModalManager_default {
  adjustAndStore(prop, element, adjust) {
    const actual = element.style[prop];
    element.dataset[prop] = actual;
    css_default(element, {
      [prop]: `${parseFloat(css_default(element, prop)) + adjust}px`
    });
  }
  restore(prop, element) {
    const value = element.dataset[prop];
    if (value !== void 0) {
      delete element.dataset[prop];
      css_default(element, {
        [prop]: value
      });
    }
  }
  setContainerStyle(containerState) {
    super.setContainerStyle(containerState);
    const container = this.getElement();
    addClass(container, "modal-open");
    if (!containerState.scrollBarWidth)
      return;
    const paddingProp = this.isRTL ? "paddingLeft" : "paddingRight";
    const marginProp = this.isRTL ? "marginLeft" : "marginRight";
    qsa(container, Selector.FIXED_CONTENT).forEach((el) => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));
    qsa(container, Selector.STICKY_CONTENT).forEach((el) => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));
    qsa(container, Selector.NAVBAR_TOGGLER).forEach((el) => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));
  }
  removeContainerStyle(containerState) {
    super.removeContainerStyle(containerState);
    const container = this.getElement();
    removeClass(container, "modal-open");
    const paddingProp = this.isRTL ? "paddingLeft" : "paddingRight";
    const marginProp = this.isRTL ? "marginLeft" : "marginRight";
    qsa(container, Selector.FIXED_CONTENT).forEach((el) => this.restore(paddingProp, el));
    qsa(container, Selector.STICKY_CONTENT).forEach((el) => this.restore(marginProp, el));
    qsa(container, Selector.NAVBAR_TOGGLER).forEach((el) => this.restore(marginProp, el));
  }
};
var sharedManager;
function getSharedManager(options) {
  if (!sharedManager)
    sharedManager = new BootstrapModalManager(options);
  return sharedManager;
}
var BootstrapModalManager_default = BootstrapModalManager;

// node_modules/react-bootstrap/esm/ModalBody.js
var ModalBody_default = createWithBsPrefix("modal-body");

// node_modules/react-bootstrap/esm/ModalContext.js
var React68 = __toESM(require_react());
var ModalContext = React68.createContext({
  onHide() {
  }
});
var ModalContext_default = ModalContext;

// node_modules/react-bootstrap/esm/ModalDialog.js
var import_classnames44 = __toESM(require_classnames());
var React69 = __toESM(require_react());
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var ModalDialog = React69.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    contentClassName,
    centered,
    size: size2,
    fullscreen,
    children,
    scrollable
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "contentClassName",
    "centered",
    "size",
    "fullscreen",
    "children",
    "scrollable"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "modal");
  const dialogClass = `${bsPrefix}-dialog`;
  const fullScreenClass = typeof fullscreen === "string" ? `${bsPrefix}-fullscreen-${fullscreen}` : `${bsPrefix}-fullscreen`;
  return (0, import_jsx_runtime67.jsx)("div", __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames44.default)(dialogClass, className, size2 && `${bsPrefix}-${size2}`, centered && `${dialogClass}-centered`, scrollable && `${dialogClass}-scrollable`, fullscreen && fullScreenClass),
    children: (0, import_jsx_runtime67.jsx)("div", {
      className: (0, import_classnames44.default)(`${bsPrefix}-content`, contentClassName),
      children
    })
  }));
});
ModalDialog.displayName = "ModalDialog";
var ModalDialog_default = ModalDialog;

// node_modules/react-bootstrap/esm/ModalFooter.js
var ModalFooter_default = createWithBsPrefix("modal-footer");

// node_modules/react-bootstrap/esm/ModalHeader.js
var import_classnames45 = __toESM(require_classnames());
var React71 = __toESM(require_react());

// node_modules/react-bootstrap/esm/AbstractModalHeader.js
var React70 = __toESM(require_react());
var import_react41 = __toESM(require_react());
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
var defaultProps19 = {
  closeLabel: "Close",
  closeButton: false
};
var AbstractModalHeader = React70.forwardRef((_a, ref) => {
  var _b = _a, {
    closeLabel,
    closeVariant,
    closeButton,
    onHide,
    children
  } = _b, props = __objRest(_b, [
    "closeLabel",
    "closeVariant",
    "closeButton",
    "onHide",
    "children"
  ]);
  const context6 = (0, import_react41.useContext)(ModalContext_default);
  const handleClick = useEventCallback(() => {
    context6 == null ? void 0 : context6.onHide();
    onHide == null ? void 0 : onHide();
  });
  return (0, import_jsx_runtime69.jsxs)("div", __spreadProps(__spreadValues({
    ref
  }, props), {
    children: [children, closeButton && (0, import_jsx_runtime68.jsx)(CloseButton_default, {
      "aria-label": closeLabel,
      variant: closeVariant,
      onClick: handleClick
    })]
  }));
});
AbstractModalHeader.defaultProps = defaultProps19;
var AbstractModalHeader_default = AbstractModalHeader;

// node_modules/react-bootstrap/esm/ModalHeader.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());
var defaultProps20 = {
  closeLabel: "Close",
  closeButton: false
};
var ModalHeader = React71.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "modal-header");
  return (0, import_jsx_runtime70.jsx)(AbstractModalHeader_default, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames45.default)(className, bsPrefix)
  }));
});
ModalHeader.displayName = "ModalHeader";
ModalHeader.defaultProps = defaultProps20;
var ModalHeader_default = ModalHeader;

// node_modules/react-bootstrap/esm/ModalTitle.js
var DivStyledAsH42 = divWithClassName_default("h4");
var ModalTitle_default = createWithBsPrefix("modal-title", {
  Component: DivStyledAsH42
});

// node_modules/react-bootstrap/esm/Modal.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var defaultProps21 = {
  show: false,
  backdrop: true,
  keyboard: true,
  autoFocus: true,
  enforceFocus: true,
  restoreFocus: true,
  animation: true,
  dialogAs: ModalDialog_default
};
function DialogTransition(props) {
  return (0, import_jsx_runtime71.jsx)(Fade_default, __spreadProps(__spreadValues({}, props), {
    timeout: null
  }));
}
function BackdropTransition(props) {
  return (0, import_jsx_runtime71.jsx)(Fade_default, __spreadProps(__spreadValues({}, props), {
    timeout: null
  }));
}
var Modal2 = React72.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    style,
    dialogClassName,
    contentClassName,
    children,
    dialogAs: Dialog,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    show,
    animation,
    backdrop,
    keyboard,
    onEscapeKeyDown,
    onShow,
    onHide,
    container,
    autoFocus,
    enforceFocus,
    restoreFocus,
    restoreFocusOptions,
    onEntered,
    onExit,
    onExiting,
    onEnter,
    onEntering,
    onExited,
    backdropClassName,
    manager: propsManager
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "style",
    "dialogClassName",
    "contentClassName",
    "children",
    "dialogAs",
    "aria-labelledby",
    "aria-describedby",
    "aria-label",
    "show",
    "animation",
    "backdrop",
    "keyboard",
    "onEscapeKeyDown",
    "onShow",
    "onHide",
    "container",
    "autoFocus",
    "enforceFocus",
    "restoreFocus",
    "restoreFocusOptions",
    "onEntered",
    "onExit",
    "onExiting",
    "onEnter",
    "onEntering",
    "onExited",
    "backdropClassName",
    "manager"
  ]);
  const [modalStyle, setStyle] = (0, import_react42.useState)({});
  const [animateStaticModal, setAnimateStaticModal] = (0, import_react42.useState)(false);
  const waitingForMouseUpRef = (0, import_react42.useRef)(false);
  const ignoreBackdropClickRef = (0, import_react42.useRef)(false);
  const removeStaticModalAnimationRef = (0, import_react42.useRef)(null);
  const [modal, setModalRef] = useCallbackRef();
  const mergedRef = useMergedRefs_default(ref, setModalRef);
  const handleHide = useEventCallback(onHide);
  const isRTL = useIsRTL();
  bsPrefix = useBootstrapPrefix(bsPrefix, "modal");
  const modalContext = (0, import_react42.useMemo)(() => ({
    onHide: handleHide
  }), [handleHide]);
  function getModalManager() {
    if (propsManager)
      return propsManager;
    return getSharedManager({
      isRTL
    });
  }
  function updateDialogStyle(node) {
    if (!canUseDOM_default)
      return;
    const containerIsOverflowing = getModalManager().getScrollbarWidth() > 0;
    const modalIsOverflowing = node.scrollHeight > ownerDocument(node).documentElement.clientHeight;
    setStyle({
      paddingRight: containerIsOverflowing && !modalIsOverflowing ? scrollbarSize() : void 0,
      paddingLeft: !containerIsOverflowing && modalIsOverflowing ? scrollbarSize() : void 0
    });
  }
  const handleWindowResize = useEventCallback(() => {
    if (modal) {
      updateDialogStyle(modal.dialog);
    }
  });
  useWillUnmount(() => {
    removeEventListener_default(window, "resize", handleWindowResize);
    removeStaticModalAnimationRef.current == null ? void 0 : removeStaticModalAnimationRef.current();
  });
  const handleDialogMouseDown = () => {
    waitingForMouseUpRef.current = true;
  };
  const handleMouseUp = (e) => {
    if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) {
      ignoreBackdropClickRef.current = true;
    }
    waitingForMouseUpRef.current = false;
  };
  const handleStaticModalAnimation = () => {
    setAnimateStaticModal(true);
    removeStaticModalAnimationRef.current = transitionEnd(modal.dialog, () => {
      setAnimateStaticModal(false);
    });
  };
  const handleStaticBackdropClick = (e) => {
    if (e.target !== e.currentTarget) {
      return;
    }
    handleStaticModalAnimation();
  };
  const handleClick = (e) => {
    if (backdrop === "static") {
      handleStaticBackdropClick(e);
      return;
    }
    if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {
      ignoreBackdropClickRef.current = false;
      return;
    }
    onHide == null ? void 0 : onHide();
  };
  const handleEscapeKeyDown = (e) => {
    if (!keyboard && backdrop === "static") {
      e.preventDefault();
      handleStaticModalAnimation();
    } else if (keyboard && onEscapeKeyDown) {
      onEscapeKeyDown(e);
    }
  };
  const handleEnter = (node, isAppearing) => {
    if (node) {
      updateDialogStyle(node);
    }
    onEnter == null ? void 0 : onEnter(node, isAppearing);
  };
  const handleExit = (node) => {
    removeStaticModalAnimationRef.current == null ? void 0 : removeStaticModalAnimationRef.current();
    onExit == null ? void 0 : onExit(node);
  };
  const handleEntering = (node, isAppearing) => {
    onEntering == null ? void 0 : onEntering(node, isAppearing);
    addEventListener_default(window, "resize", handleWindowResize);
  };
  const handleExited = (node) => {
    if (node)
      node.style.display = "";
    onExited == null ? void 0 : onExited(node);
    removeEventListener_default(window, "resize", handleWindowResize);
  };
  const renderBackdrop = (0, import_react42.useCallback)((backdropProps) => (0, import_jsx_runtime71.jsx)("div", __spreadProps(__spreadValues({}, backdropProps), {
    className: (0, import_classnames46.default)(`${bsPrefix}-backdrop`, backdropClassName, !animation && "show")
  })), [animation, backdropClassName, bsPrefix]);
  const baseModalStyle = __spreadValues(__spreadValues({}, style), modalStyle);
  baseModalStyle.display = "block";
  const renderDialog = (dialogProps) => (0, import_jsx_runtime71.jsx)("div", __spreadProps(__spreadValues({
    role: "dialog"
  }, dialogProps), {
    style: baseModalStyle,
    className: (0, import_classnames46.default)(className, bsPrefix, animateStaticModal && `${bsPrefix}-static`),
    onClick: backdrop ? handleClick : void 0,
    onMouseUp: handleMouseUp,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    children: (0, import_jsx_runtime71.jsx)(Dialog, __spreadProps(__spreadValues({}, props), {
      onMouseDown: handleDialogMouseDown,
      className: dialogClassName,
      contentClassName,
      children
    }))
  }));
  return (0, import_jsx_runtime71.jsx)(ModalContext_default.Provider, {
    value: modalContext,
    children: (0, import_jsx_runtime71.jsx)(Modal_default, {
      show,
      ref: mergedRef,
      backdrop,
      container,
      keyboard: true,
      autoFocus,
      enforceFocus,
      restoreFocus,
      restoreFocusOptions,
      onEscapeKeyDown: handleEscapeKeyDown,
      onShow,
      onHide,
      onEnter: handleEnter,
      onEntering: handleEntering,
      onEntered,
      onExit: handleExit,
      onExiting,
      onExited: handleExited,
      manager: getModalManager(),
      transition: animation ? DialogTransition : void 0,
      backdropTransition: animation ? BackdropTransition : void 0,
      renderBackdrop,
      renderDialog
    })
  });
});
Modal2.displayName = "Modal";
Modal2.defaultProps = defaultProps21;
var Modal_default2 = Object.assign(Modal2, {
  Body: ModalBody_default,
  Header: ModalHeader_default,
  Title: ModalTitle_default,
  Footer: ModalFooter_default,
  Dialog: ModalDialog_default,
  TRANSITION_DURATION: 300,
  BACKDROP_TRANSITION_DURATION: 150
});

// node_modules/react-bootstrap/esm/Nav.js
var import_classnames48 = __toESM(require_classnames());
var import_all = __toESM(require_all());
var React74 = __toESM(require_react());
var import_react43 = __toESM(require_react());

// node_modules/react-bootstrap/esm/NavItem.js
var NavItem_default2 = createWithBsPrefix("nav-item");

// node_modules/react-bootstrap/esm/NavLink.js
var import_classnames47 = __toESM(require_classnames());
var React73 = __toESM(require_react());
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
var defaultProps22 = {
  disabled: false
};
var NavLink = React73.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    as: Component = Anchor_default,
    active,
    eventKey
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "as",
    "active",
    "eventKey"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "nav-link");
  const [navItemProps, meta] = useNavItem(__spreadValues({
    key: makeEventKey(eventKey, props.href),
    active
  }, props));
  return (0, import_jsx_runtime72.jsx)(Component, __spreadProps(__spreadValues(__spreadValues({}, props), navItemProps), {
    ref,
    className: (0, import_classnames47.default)(className, bsPrefix, props.disabled && "disabled", meta.isActive && "active")
  }));
});
NavLink.displayName = "NavLink";
NavLink.defaultProps = defaultProps22;
var NavLink_default = NavLink;

// node_modules/react-bootstrap/esm/Nav.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var defaultProps23 = {
  justify: false,
  fill: false
};
var Nav2 = React74.forwardRef((uncontrolledProps, ref) => {
  const _a = useUncontrolled(uncontrolledProps, {
    activeKey: "onSelect"
  }), {
    as = "div",
    bsPrefix: initialBsPrefix,
    variant,
    fill,
    justify,
    navbar,
    navbarScroll,
    className,
    activeKey
  } = _a, props = __objRest(_a, [
    "as",
    "bsPrefix",
    "variant",
    "fill",
    "justify",
    "navbar",
    "navbarScroll",
    "className",
    "activeKey"
  ]);
  const bsPrefix = useBootstrapPrefix(initialBsPrefix, "nav");
  let navbarBsPrefix;
  let cardHeaderBsPrefix;
  let isNavbar = false;
  const navbarContext = (0, import_react43.useContext)(NavbarContext_default);
  const cardHeaderContext = (0, import_react43.useContext)(CardHeaderContext_default);
  if (navbarContext) {
    navbarBsPrefix = navbarContext.bsPrefix;
    isNavbar = navbar == null ? true : navbar;
  } else if (cardHeaderContext) {
    ({
      cardHeaderBsPrefix
    } = cardHeaderContext);
  }
  return (0, import_jsx_runtime73.jsx)(Nav_default, __spreadValues({
    as,
    ref,
    activeKey,
    className: (0, import_classnames48.default)(className, {
      [bsPrefix]: !isNavbar,
      [`${navbarBsPrefix}-nav`]: isNavbar,
      [`${navbarBsPrefix}-nav-scroll`]: isNavbar && navbarScroll,
      [`${cardHeaderBsPrefix}-${variant}`]: !!cardHeaderBsPrefix,
      [`${bsPrefix}-${variant}`]: !!variant,
      [`${bsPrefix}-fill`]: fill,
      [`${bsPrefix}-justified`]: justify
    })
  }, props));
});
Nav2.displayName = "Nav";
Nav2.defaultProps = defaultProps23;
var Nav_default2 = Object.assign(Nav2, {
  Item: NavItem_default2,
  Link: NavLink_default
});

// node_modules/react-bootstrap/esm/Navbar.js
var import_classnames55 = __toESM(require_classnames());
var React82 = __toESM(require_react());
var import_react50 = __toESM(require_react());

// node_modules/react-bootstrap/esm/NavbarBrand.js
var import_classnames49 = __toESM(require_classnames());
var React75 = __toESM(require_react());
var import_jsx_runtime74 = __toESM(require_jsx_runtime());
var NavbarBrand = React75.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    as
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "as"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-brand");
  const Component = as || (props.href ? "a" : "span");
  return (0, import_jsx_runtime74.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames49.default)(className, bsPrefix)
  }));
});
NavbarBrand.displayName = "NavbarBrand";
var NavbarBrand_default = NavbarBrand;

// node_modules/react-bootstrap/esm/NavbarCollapse.js
var React76 = __toESM(require_react());
var import_react44 = __toESM(require_react());
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
var NavbarCollapse = React76.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    bsPrefix
  } = _b, props = __objRest(_b, [
    "children",
    "bsPrefix"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-collapse");
  const context6 = (0, import_react44.useContext)(NavbarContext_default);
  return (0, import_jsx_runtime75.jsx)(Collapse_default, __spreadProps(__spreadValues({
    in: !!(context6 && context6.expanded)
  }, props), {
    children: (0, import_jsx_runtime75.jsx)("div", {
      ref,
      className: bsPrefix,
      children
    })
  }));
});
NavbarCollapse.displayName = "NavbarCollapse";
var NavbarCollapse_default = NavbarCollapse;

// node_modules/react-bootstrap/esm/NavbarToggle.js
var import_classnames50 = __toESM(require_classnames());
var React77 = __toESM(require_react());
var import_react45 = __toESM(require_react());
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
var defaultProps24 = {
  label: "Toggle navigation"
};
var NavbarToggle = React77.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    children,
    label,
    as: Component = "button",
    onClick
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "children",
    "label",
    "as",
    "onClick"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "navbar-toggler");
  const {
    onToggle,
    expanded
  } = (0, import_react45.useContext)(NavbarContext_default) || {};
  const handleClick = useEventCallback((e) => {
    if (onClick)
      onClick(e);
    if (onToggle)
      onToggle();
  });
  if (Component === "button") {
    props.type = "button";
  }
  return (0, import_jsx_runtime76.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    onClick: handleClick,
    "aria-label": label,
    className: (0, import_classnames50.default)(className, bsPrefix, !expanded && "collapsed"),
    children: children || (0, import_jsx_runtime76.jsx)("span", {
      className: `${bsPrefix}-icon`
    })
  }));
});
NavbarToggle.displayName = "NavbarToggle";
NavbarToggle.defaultProps = defaultProps24;
var NavbarToggle_default = NavbarToggle;

// node_modules/react-bootstrap/esm/NavbarOffcanvas.js
var React81 = __toESM(require_react());
var import_react49 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useMediaQuery.js
var import_react46 = __toESM(require_react());
var matchersByWindow = /* @__PURE__ */ new WeakMap();
var getMatcher = function getMatcher2(query, targetWindow) {
  if (!query || !targetWindow)
    return void 0;
  var matchers = matchersByWindow.get(targetWindow) || /* @__PURE__ */ new Map();
  matchersByWindow.set(targetWindow, matchers);
  var mql = matchers.get(query);
  if (!mql) {
    mql = targetWindow.matchMedia(query);
    mql.refCount = 0;
    matchers.set(mql.media, mql);
  }
  return mql;
};
function useMediaQuery(query, targetWindow) {
  if (targetWindow === void 0) {
    targetWindow = typeof window === "undefined" ? void 0 : window;
  }
  var mql = getMatcher(query, targetWindow);
  var _useState = (0, import_react46.useState)(function() {
    return mql ? mql.matches : false;
  }), matches = _useState[0], setMatches = _useState[1];
  useIsomorphicEffect_default(function() {
    var mql2 = getMatcher(query, targetWindow);
    if (!mql2) {
      return setMatches(false);
    }
    var matchers = matchersByWindow.get(targetWindow);
    var handleChange = function handleChange2() {
      setMatches(mql2.matches);
    };
    mql2.refCount++;
    mql2.addListener(handleChange);
    handleChange();
    return function() {
      mql2.removeListener(handleChange);
      mql2.refCount--;
      if (mql2.refCount <= 0) {
        matchers == null ? void 0 : matchers.delete(mql2.media);
      }
      mql2 = void 0;
    };
  }, [query]);
  return matches;
}

// node_modules/@restart/hooks/esm/useBreakpoint.js
var import_react47 = __toESM(require_react());
function createBreakpointHook(breakpointValues) {
  var names = Object.keys(breakpointValues);
  function and(query, next) {
    if (query === next) {
      return next;
    }
    return query ? query + " and " + next : next;
  }
  function getNext(breakpoint) {
    return names[Math.min(names.indexOf(breakpoint) + 1, names.length - 1)];
  }
  function getMaxQuery(breakpoint) {
    var next = getNext(breakpoint);
    var value = breakpointValues[next];
    if (typeof value === "number")
      value = value - 0.2 + "px";
    else
      value = "calc(" + value + " - 0.2px)";
    return "(max-width: " + value + ")";
  }
  function getMinQuery(breakpoint) {
    var value = breakpointValues[breakpoint];
    if (typeof value === "number") {
      value = value + "px";
    }
    return "(min-width: " + value + ")";
  }
  function useBreakpoint2(breakpointOrMap, direction, window2) {
    var breakpointMap;
    if (typeof breakpointOrMap === "object") {
      breakpointMap = breakpointOrMap;
      window2 = direction;
      direction = true;
    } else {
      var _breakpointMap;
      direction = direction || true;
      breakpointMap = (_breakpointMap = {}, _breakpointMap[breakpointOrMap] = direction, _breakpointMap);
    }
    var query = (0, import_react47.useMemo)(function() {
      return Object.entries(breakpointMap).reduce(function(query2, _ref) {
        var key = _ref[0], direction2 = _ref[1];
        if (direction2 === "up" || direction2 === true) {
          query2 = and(query2, getMinQuery(key));
        }
        if (direction2 === "down" || direction2 === true) {
          query2 = and(query2, getMaxQuery(key));
        }
        return query2;
      }, "");
    }, [JSON.stringify(breakpointMap)]);
    return useMediaQuery(query, window2);
  }
  return useBreakpoint2;
}
var useBreakpoint = createBreakpointHook({
  xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200,
  xxl: 1400
});
var useBreakpoint_default = useBreakpoint;

// node_modules/react-bootstrap/esm/NavbarOffcanvas.js
var import_classnames54 = __toESM(require_classnames());

// node_modules/react-bootstrap/esm/Offcanvas.js
var import_classnames53 = __toESM(require_classnames());
var React80 = __toESM(require_react());
var import_react48 = __toESM(require_react());

// node_modules/react-bootstrap/esm/OffcanvasBody.js
var OffcanvasBody_default = createWithBsPrefix("offcanvas-body");

// node_modules/react-bootstrap/esm/OffcanvasToggling.js
var import_classnames51 = __toESM(require_classnames());
var React78 = __toESM(require_react());
var import_jsx_runtime77 = __toESM(require_jsx_runtime());
var defaultProps25 = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false
};
var transitionStyles = {
  [ENTERING]: "show",
  [ENTERED]: "show"
};
var OffcanvasToggling = React78.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    children
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "children"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas");
  return (0, import_jsx_runtime77.jsx)(TransitionWrapper_default, __spreadProps(__spreadValues({
    ref,
    addEndListener: transitionEndListener
  }, props), {
    childRef: children.ref,
    children: (status, innerProps) => React78.cloneElement(children, __spreadProps(__spreadValues({}, innerProps), {
      className: (0, import_classnames51.default)(className, children.props.className, (status === ENTERING || status === EXITING) && `${bsPrefix}-toggling`, transitionStyles[status])
    }))
  }));
});
OffcanvasToggling.defaultProps = defaultProps25;
OffcanvasToggling.displayName = "OffcanvasToggling";
var OffcanvasToggling_default = OffcanvasToggling;

// node_modules/react-bootstrap/esm/OffcanvasHeader.js
var import_classnames52 = __toESM(require_classnames());
var React79 = __toESM(require_react());
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
var defaultProps26 = {
  closeLabel: "Close",
  closeButton: false
};
var OffcanvasHeader = React79.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas-header");
  return (0, import_jsx_runtime78.jsx)(AbstractModalHeader_default, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames52.default)(className, bsPrefix)
  }));
});
OffcanvasHeader.displayName = "OffcanvasHeader";
OffcanvasHeader.defaultProps = defaultProps26;
var OffcanvasHeader_default = OffcanvasHeader;

// node_modules/react-bootstrap/esm/OffcanvasTitle.js
var DivStyledAsH52 = divWithClassName_default("h5");
var OffcanvasTitle_default = createWithBsPrefix("offcanvas-title", {
  Component: DivStyledAsH52
});

// node_modules/react-bootstrap/esm/Offcanvas.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime());
var defaultProps27 = {
  show: false,
  backdrop: true,
  keyboard: true,
  scroll: false,
  autoFocus: true,
  enforceFocus: true,
  restoreFocus: true,
  placement: "start"
};
function DialogTransition2(props) {
  return (0, import_jsx_runtime79.jsx)(OffcanvasToggling_default, __spreadValues({}, props));
}
function BackdropTransition2(props) {
  return (0, import_jsx_runtime79.jsx)(Fade_default, __spreadValues({}, props));
}
var Offcanvas = React80.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    children,
    "aria-labelledby": ariaLabelledby,
    placement,
    show,
    backdrop,
    keyboard,
    scroll,
    onEscapeKeyDown,
    onShow,
    onHide,
    container,
    autoFocus,
    enforceFocus,
    restoreFocus,
    restoreFocusOptions,
    onEntered,
    onExit,
    onExiting,
    onEnter,
    onEntering,
    onExited,
    backdropClassName,
    manager: propsManager
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "children",
    "aria-labelledby",
    "placement",
    "show",
    "backdrop",
    "keyboard",
    "scroll",
    "onEscapeKeyDown",
    "onShow",
    "onHide",
    "container",
    "autoFocus",
    "enforceFocus",
    "restoreFocus",
    "restoreFocusOptions",
    "onEntered",
    "onExit",
    "onExiting",
    "onEnter",
    "onEntering",
    "onExited",
    "backdropClassName",
    "manager"
  ]);
  const modalManager = (0, import_react48.useRef)();
  bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas");
  const {
    onToggle
  } = (0, import_react48.useContext)(NavbarContext_default) || {};
  const handleHide = useEventCallback(() => {
    onToggle == null ? void 0 : onToggle();
    onHide == null ? void 0 : onHide();
  });
  const modalContext = (0, import_react48.useMemo)(() => ({
    onHide: handleHide
  }), [handleHide]);
  function getModalManager() {
    if (propsManager)
      return propsManager;
    if (scroll) {
      if (!modalManager.current)
        modalManager.current = new BootstrapModalManager_default({
          handleContainerOverflow: false
        });
      return modalManager.current;
    }
    return getSharedManager();
  }
  const handleEnter = (node, ...args) => {
    if (node)
      node.style.visibility = "visible";
    onEnter == null ? void 0 : onEnter(node, ...args);
  };
  const handleExited = (node, ...args) => {
    if (node)
      node.style.visibility = "";
    onExited == null ? void 0 : onExited(...args);
  };
  const renderBackdrop = (0, import_react48.useCallback)((backdropProps) => (0, import_jsx_runtime79.jsx)("div", __spreadProps(__spreadValues({}, backdropProps), {
    className: (0, import_classnames53.default)(`${bsPrefix}-backdrop`, backdropClassName)
  })), [backdropClassName, bsPrefix]);
  const renderDialog = (dialogProps) => (0, import_jsx_runtime79.jsx)("div", __spreadProps(__spreadValues(__spreadValues({
    role: "dialog"
  }, dialogProps), props), {
    className: (0, import_classnames53.default)(className, bsPrefix, `${bsPrefix}-${placement}`),
    "aria-labelledby": ariaLabelledby,
    children
  }));
  return (0, import_jsx_runtime79.jsx)(ModalContext_default.Provider, {
    value: modalContext,
    children: (0, import_jsx_runtime79.jsx)(Modal_default, {
      show,
      ref,
      backdrop,
      container,
      keyboard,
      autoFocus,
      enforceFocus: enforceFocus && !scroll,
      restoreFocus,
      restoreFocusOptions,
      onEscapeKeyDown,
      onShow,
      onHide: handleHide,
      onEnter: handleEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited: handleExited,
      manager: getModalManager(),
      transition: DialogTransition2,
      backdropTransition: BackdropTransition2,
      renderBackdrop,
      renderDialog
    })
  });
});
Offcanvas.displayName = "Offcanvas";
Offcanvas.defaultProps = defaultProps27;
var Offcanvas_default = Object.assign(Offcanvas, {
  Body: OffcanvasBody_default,
  Header: OffcanvasHeader_default,
  Title: OffcanvasTitle_default
});

// node_modules/react-bootstrap/esm/NavbarOffcanvas.js
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
var NavbarOffcanvas = React81.forwardRef((_a, ref) => {
  var _b = _a, {
    className,
    bsPrefix,
    backdrop,
    backdropClassName,
    keyboard,
    scroll,
    placement,
    autoFocus,
    enforceFocus,
    restoreFocus,
    restoreFocusOptions,
    onShow,
    onHide,
    onEscapeKeyDown,
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    onExited
  } = _b, props = __objRest(_b, [
    "className",
    "bsPrefix",
    "backdrop",
    "backdropClassName",
    "keyboard",
    "scroll",
    "placement",
    "autoFocus",
    "enforceFocus",
    "restoreFocus",
    "restoreFocusOptions",
    "onShow",
    "onHide",
    "onEscapeKeyDown",
    "onEnter",
    "onEntering",
    "onEntered",
    "onExit",
    "onExiting",
    "onExited"
  ]);
  const context6 = (0, import_react49.useContext)(NavbarContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "offcanvas");
  const hasExpandProp = typeof (context6 == null ? void 0 : context6.expand) === "string";
  const shouldExpand = useBreakpoint_default(hasExpandProp ? context6.expand : "xs", "up");
  return hasExpandProp && shouldExpand ? (0, import_jsx_runtime80.jsx)("div", __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames54.default)(className, bsPrefix, `${bsPrefix}-${placement}`)
  })) : (0, import_jsx_runtime80.jsx)(Offcanvas_default, __spreadValues({
    ref,
    show: !!(context6 != null && context6.expanded),
    bsPrefix,
    backdrop,
    backdropClassName,
    keyboard,
    scroll,
    placement,
    autoFocus,
    enforceFocus,
    restoreFocus,
    restoreFocusOptions,
    onShow,
    onHide,
    onEscapeKeyDown,
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    onExited
  }, props));
});
NavbarOffcanvas.displayName = "NavbarOffcanvas";
var NavbarOffcanvas_default = NavbarOffcanvas;

// node_modules/react-bootstrap/esm/Navbar.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
var NavbarText = createWithBsPrefix("navbar-text", {
  Component: "span"
});
var defaultProps28 = {
  expand: true,
  variant: "light",
  collapseOnSelect: false
};
var Navbar = React82.forwardRef((props, ref) => {
  const _a = useUncontrolled(props, {
    expanded: "onToggle"
  }), {
    bsPrefix: initialBsPrefix,
    expand,
    variant,
    bg,
    fixed,
    sticky,
    className,
    as: Component = "nav",
    expanded,
    onToggle,
    onSelect,
    collapseOnSelect
  } = _a, controlledProps = __objRest(_a, [
    "bsPrefix",
    "expand",
    "variant",
    "bg",
    "fixed",
    "sticky",
    "className",
    "as",
    "expanded",
    "onToggle",
    "onSelect",
    "collapseOnSelect"
  ]);
  const bsPrefix = useBootstrapPrefix(initialBsPrefix, "navbar");
  const handleCollapse = (0, import_react50.useCallback)((...args) => {
    onSelect == null ? void 0 : onSelect(...args);
    if (collapseOnSelect && expanded) {
      onToggle == null ? void 0 : onToggle(false);
    }
  }, [onSelect, collapseOnSelect, expanded, onToggle]);
  if (controlledProps.role === void 0 && Component !== "nav") {
    controlledProps.role = "navigation";
  }
  let expandClass = `${bsPrefix}-expand`;
  if (typeof expand === "string")
    expandClass = `${expandClass}-${expand}`;
  const navbarContext = (0, import_react50.useMemo)(() => ({
    onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),
    bsPrefix,
    expanded: !!expanded,
    expand
  }), [bsPrefix, expanded, expand, onToggle]);
  return (0, import_jsx_runtime81.jsx)(NavbarContext_default.Provider, {
    value: navbarContext,
    children: (0, import_jsx_runtime81.jsx)(SelectableContext_default.Provider, {
      value: handleCollapse,
      children: (0, import_jsx_runtime81.jsx)(Component, __spreadProps(__spreadValues({
        ref
      }, controlledProps), {
        className: (0, import_classnames55.default)(className, bsPrefix, expand && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)
      }))
    })
  });
});
Navbar.defaultProps = defaultProps28;
Navbar.displayName = "Navbar";
var Navbar_default = Object.assign(Navbar, {
  Brand: NavbarBrand_default,
  Collapse: NavbarCollapse_default,
  Offcanvas: NavbarOffcanvas_default,
  Text: NavbarText,
  Toggle: NavbarToggle_default
});

// node_modules/react-bootstrap/esm/NavDropdown.js
var import_classnames56 = __toESM(require_classnames());
var React83 = __toESM(require_react());
var import_jsx_runtime82 = __toESM(require_jsx_runtime());
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
var NavDropdown = React83.forwardRef((_a, ref) => {
  var _b = _a, {
    id,
    title,
    children,
    bsPrefix,
    className,
    rootCloseEvent,
    menuRole,
    disabled,
    active,
    renderMenuOnMount,
    menuVariant
  } = _b, props = __objRest(_b, [
    "id",
    "title",
    "children",
    "bsPrefix",
    "className",
    "rootCloseEvent",
    "menuRole",
    "disabled",
    "active",
    "renderMenuOnMount",
    "menuVariant"
  ]);
  const navItemPrefix = useBootstrapPrefix(void 0, "nav-item");
  return (0, import_jsx_runtime83.jsxs)(Dropdown_default2, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames56.default)(className, navItemPrefix),
    children: [(0, import_jsx_runtime82.jsx)(Dropdown_default2.Toggle, {
      id,
      eventKey: null,
      active,
      disabled,
      childBsPrefix: bsPrefix,
      as: NavLink_default,
      children: title
    }), (0, import_jsx_runtime82.jsx)(Dropdown_default2.Menu, {
      role: menuRole,
      renderOnMount: renderMenuOnMount,
      rootCloseEvent,
      variant: menuVariant,
      children
    })]
  }));
});
NavDropdown.displayName = "NavDropdown";
var NavDropdown_default = Object.assign(NavDropdown, {
  Item: Dropdown_default2.Item,
  ItemText: Dropdown_default2.ItemText,
  Divider: Dropdown_default2.Divider,
  Header: Dropdown_default2.Header
});

// node_modules/react-bootstrap/esm/PageItem.js
var import_classnames57 = __toESM(require_classnames());
var React84 = __toESM(require_react());
var import_jsx_runtime84 = __toESM(require_jsx_runtime());
var import_jsx_runtime85 = __toESM(require_jsx_runtime());
var defaultProps29 = {
  active: false,
  disabled: false,
  activeLabel: "(current)"
};
var PageItem = React84.forwardRef((_a, ref) => {
  var _b = _a, {
    active,
    disabled,
    className,
    style,
    activeLabel,
    children
  } = _b, props = __objRest(_b, [
    "active",
    "disabled",
    "className",
    "style",
    "activeLabel",
    "children"
  ]);
  const Component = active || disabled ? "span" : Anchor_default;
  return (0, import_jsx_runtime84.jsx)("li", {
    ref,
    style,
    className: (0, import_classnames57.default)(className, "page-item", {
      active,
      disabled
    }),
    children: (0, import_jsx_runtime85.jsxs)(Component, __spreadProps(__spreadValues({
      className: "page-link",
      disabled
    }, props), {
      children: [children, active && activeLabel && (0, import_jsx_runtime84.jsx)("span", {
        className: "visually-hidden",
        children: activeLabel
      })]
    }))
  });
});
PageItem.defaultProps = defaultProps29;
PageItem.displayName = "PageItem";
var PageItem_default = PageItem;
function createButton(name, defaultValue, label = name) {
  const Button3 = React84.forwardRef((_a, ref) => {
    var _b = _a, {
      children
    } = _b, props = __objRest(_b, [
      "children"
    ]);
    return (0, import_jsx_runtime85.jsxs)(PageItem, __spreadProps(__spreadValues({}, props), {
      ref,
      children: [(0, import_jsx_runtime84.jsx)("span", {
        "aria-hidden": "true",
        children: children || defaultValue
      }), (0, import_jsx_runtime84.jsx)("span", {
        className: "visually-hidden",
        children: label
      })]
    }));
  });
  Button3.displayName = name;
  return Button3;
}
var First = createButton("First", "\xAB");
var Prev = createButton("Prev", "\u2039", "Previous");
var Ellipsis = createButton("Ellipsis", "\u2026", "More");
var Next = createButton("Next", "\u203A");
var Last = createButton("Last", "\xBB");

// node_modules/react-bootstrap/esm/Pagination.js
var import_classnames58 = __toESM(require_classnames());
var React85 = __toESM(require_react());
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
var Pagination = React85.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    size: size2
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "size"
  ]);
  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "pagination");
  return (0, import_jsx_runtime86.jsx)("ul", __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames58.default)(className, decoratedBsPrefix, size2 && `${decoratedBsPrefix}-${size2}`)
  }));
});
Pagination.displayName = "Pagination";
var Pagination_default = Object.assign(Pagination, {
  First,
  Prev,
  Ellipsis,
  Item: PageItem_default,
  Next,
  Last
});

// node_modules/react-bootstrap/esm/Placeholder.js
var React87 = __toESM(require_react());

// node_modules/react-bootstrap/esm/usePlaceholder.js
var import_classnames59 = __toESM(require_classnames());
function usePlaceholder(_a) {
  var _b = _a, {
    animation,
    bg,
    bsPrefix,
    size: size2
  } = _b, props = __objRest(_b, [
    "animation",
    "bg",
    "bsPrefix",
    "size"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "placeholder");
  const [_a2] = useCol(props), _b2 = _a2, {
    className
  } = _b2, colProps = __objRest(_b2, [
    "className"
  ]);
  return __spreadProps(__spreadValues({}, colProps), {
    className: (0, import_classnames59.default)(className, animation ? `${bsPrefix}-${animation}` : bsPrefix, size2 && `${bsPrefix}-${size2}`, bg && `bg-${bg}`)
  });
}

// node_modules/react-bootstrap/esm/PlaceholderButton.js
var React86 = __toESM(require_react());
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
var PlaceholderButton = React86.forwardRef((props, ref) => {
  const placeholderProps = usePlaceholder(props);
  return (0, import_jsx_runtime87.jsx)(Button_default2, __spreadProps(__spreadValues({}, placeholderProps), {
    ref,
    disabled: true,
    tabIndex: -1
  }));
});
PlaceholderButton.displayName = "PlaceholderButton";
var PlaceholderButton_default = PlaceholderButton;

// node_modules/react-bootstrap/esm/Placeholder.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime());
var Placeholder = React87.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "span"
  } = _b, props = __objRest(_b, [
    "as"
  ]);
  const placeholderProps = usePlaceholder(props);
  return (0, import_jsx_runtime88.jsx)(Component, __spreadProps(__spreadValues({}, placeholderProps), {
    ref
  }));
});
Placeholder.displayName = "Placeholder";
var Placeholder_default = Object.assign(Placeholder, {
  Button: PlaceholderButton_default
});

// node_modules/react-bootstrap/esm/ProgressBar.js
var import_classnames60 = __toESM(require_classnames());
var React88 = __toESM(require_react());
var import_react51 = __toESM(require_react());
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
var ROUND_PRECISION = 1e3;
var defaultProps30 = {
  min: 0,
  max: 100,
  animated: false,
  isChild: false,
  visuallyHidden: false,
  striped: false
};
function getPercentage(now, min, max) {
  const percentage = (now - min) / (max - min) * 100;
  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;
}
function renderProgressBar(_a, ref) {
  var _b = _a, {
    min,
    now,
    max,
    label,
    visuallyHidden,
    striped,
    animated,
    className,
    style,
    variant,
    bsPrefix
  } = _b, props = __objRest(_b, [
    "min",
    "now",
    "max",
    "label",
    "visuallyHidden",
    "striped",
    "animated",
    "className",
    "style",
    "variant",
    "bsPrefix"
  ]);
  return (0, import_jsx_runtime89.jsx)("div", __spreadProps(__spreadValues({
    ref
  }, props), {
    role: "progressbar",
    className: (0, import_classnames60.default)(className, `${bsPrefix}-bar`, {
      [`bg-${variant}`]: variant,
      [`${bsPrefix}-bar-animated`]: animated,
      [`${bsPrefix}-bar-striped`]: animated || striped
    }),
    style: __spreadValues({
      width: `${getPercentage(now, min, max)}%`
    }, style),
    "aria-valuenow": now,
    "aria-valuemin": min,
    "aria-valuemax": max,
    children: visuallyHidden ? (0, import_jsx_runtime89.jsx)("span", {
      className: "visually-hidden",
      children: label
    }) : label
  }));
}
var ProgressBar = React88.forwardRef((_a, ref) => {
  var _b = _a, {
    isChild
  } = _b, props = __objRest(_b, [
    "isChild"
  ]);
  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, "progress");
  if (isChild) {
    return renderProgressBar(props, ref);
  }
  const _a2 = props, {
    min,
    now,
    max,
    label,
    visuallyHidden,
    striped,
    animated,
    bsPrefix,
    variant,
    className,
    children
  } = _a2, wrapperProps = __objRest(_a2, [
    "min",
    "now",
    "max",
    "label",
    "visuallyHidden",
    "striped",
    "animated",
    "bsPrefix",
    "variant",
    "className",
    "children"
  ]);
  return (0, import_jsx_runtime89.jsx)("div", __spreadProps(__spreadValues({
    ref
  }, wrapperProps), {
    className: (0, import_classnames60.default)(className, bsPrefix),
    children: children ? map(children, (child) => (0, import_react51.cloneElement)(child, {
      isChild: true
    })) : renderProgressBar({
      min,
      now,
      max,
      label,
      visuallyHidden,
      striped,
      animated,
      bsPrefix,
      variant
    }, ref)
  }));
});
ProgressBar.displayName = "ProgressBar";
ProgressBar.defaultProps = defaultProps30;
var ProgressBar_default = ProgressBar;

// node_modules/react-bootstrap/esm/Ratio.js
var import_classnames61 = __toESM(require_classnames());
var React89 = __toESM(require_react());
var import_jsx_runtime90 = __toESM(require_jsx_runtime());
var defaultProps31 = {
  aspectRatio: "1x1"
};
function toPercent(num) {
  if (num <= 0 || num > 100)
    return "100%";
  if (num < 1)
    return `${num * 100}%`;
  return `${num}%`;
}
var Ratio = React89.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    children,
    aspectRatio,
    style
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "children",
    "aspectRatio",
    "style"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "ratio");
  const isCustomRatio = typeof aspectRatio === "number";
  return (0, import_jsx_runtime90.jsx)("div", __spreadProps(__spreadValues({
    ref
  }, props), {
    style: __spreadValues(__spreadValues({}, style), isCustomRatio && {
      "--bs-aspect-ratio": toPercent(aspectRatio)
    }),
    className: (0, import_classnames61.default)(bsPrefix, className, !isCustomRatio && `${bsPrefix}-${aspectRatio}`),
    children: React89.Children.only(children)
  }));
});
Ratio.defaultProps = defaultProps31;
var Ratio_default = Ratio;

// node_modules/react-bootstrap/esm/Row.js
var import_classnames62 = __toESM(require_classnames());
var React90 = __toESM(require_react());
var import_jsx_runtime91 = __toESM(require_jsx_runtime());
var Row = React90.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    as: Component = "div"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "as"
  ]);
  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "row");
  const breakpoints = useBootstrapBreakpoints();
  const sizePrefix = `${decoratedBsPrefix}-cols`;
  const classes = [];
  breakpoints.forEach((brkPoint) => {
    const propValue = props[brkPoint];
    delete props[brkPoint];
    let cols;
    if (propValue != null && typeof propValue === "object") {
      ({
        cols
      } = propValue);
    } else {
      cols = propValue;
    }
    const infix = brkPoint !== "xs" ? `-${brkPoint}` : "";
    if (cols != null)
      classes.push(`${sizePrefix}${infix}-${cols}`);
  });
  return (0, import_jsx_runtime91.jsx)(Component, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames62.default)(className, decoratedBsPrefix, ...classes)
  }));
});
Row.displayName = "Row";
var Row_default = Row;

// node_modules/react-bootstrap/esm/Spinner.js
var import_classnames63 = __toESM(require_classnames());
var React91 = __toESM(require_react());
var import_jsx_runtime92 = __toESM(require_jsx_runtime());
var Spinner = React91.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    variant,
    animation,
    size: size2,
    as: Component = "div",
    className
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "variant",
    "animation",
    "size",
    "as",
    "className"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "spinner");
  const bsSpinnerPrefix = `${bsPrefix}-${animation}`;
  return (0, import_jsx_runtime92.jsx)(Component, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames63.default)(className, bsSpinnerPrefix, size2 && `${bsSpinnerPrefix}-${size2}`, variant && `text-${variant}`)
  }));
});
Spinner.displayName = "Spinner";
var Spinner_default = Spinner;

// node_modules/react-bootstrap/esm/SplitButton.js
var React92 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var import_jsx_runtime93 = __toESM(require_jsx_runtime());
var import_jsx_runtime94 = __toESM(require_jsx_runtime());
var propTypes6 = {
  id: import_prop_types7.default.string,
  toggleLabel: import_prop_types7.default.string,
  href: import_prop_types7.default.string,
  target: import_prop_types7.default.string,
  onClick: import_prop_types7.default.func,
  title: import_prop_types7.default.node.isRequired,
  type: import_prop_types7.default.string,
  disabled: import_prop_types7.default.bool,
  align: alignPropType,
  menuRole: import_prop_types7.default.string,
  renderMenuOnMount: import_prop_types7.default.bool,
  rootCloseEvent: import_prop_types7.default.string,
  bsPrefix: import_prop_types7.default.string,
  variant: import_prop_types7.default.string,
  size: import_prop_types7.default.string
};
var defaultProps32 = {
  toggleLabel: "Toggle dropdown",
  type: "button"
};
var SplitButton = React92.forwardRef((_a, ref) => {
  var _b = _a, {
    id,
    bsPrefix,
    size: size2,
    variant,
    title,
    type,
    toggleLabel,
    children,
    onClick,
    href,
    target,
    menuRole,
    renderMenuOnMount,
    rootCloseEvent
  } = _b, props = __objRest(_b, [
    "id",
    "bsPrefix",
    "size",
    "variant",
    "title",
    "type",
    "toggleLabel",
    "children",
    "onClick",
    "href",
    "target",
    "menuRole",
    "renderMenuOnMount",
    "rootCloseEvent"
  ]);
  return (0, import_jsx_runtime94.jsxs)(Dropdown_default2, __spreadProps(__spreadValues({
    ref
  }, props), {
    as: ButtonGroup_default,
    children: [(0, import_jsx_runtime93.jsx)(Button_default2, {
      size: size2,
      variant,
      disabled: props.disabled,
      bsPrefix,
      href,
      target,
      onClick,
      type,
      children: title
    }), (0, import_jsx_runtime93.jsx)(Dropdown_default2.Toggle, {
      split: true,
      id,
      size: size2,
      variant,
      disabled: props.disabled,
      childBsPrefix: bsPrefix,
      children: (0, import_jsx_runtime93.jsx)("span", {
        className: "visually-hidden",
        children: toggleLabel
      })
    }), (0, import_jsx_runtime93.jsx)(Dropdown_default2.Menu, {
      role: menuRole,
      renderOnMount: renderMenuOnMount,
      rootCloseEvent,
      children
    })]
  }));
});
SplitButton.propTypes = propTypes6;
SplitButton.defaultProps = defaultProps32;
SplitButton.displayName = "SplitButton";
var SplitButton_default = SplitButton;

// node_modules/react-bootstrap/esm/SSRProvider.js
var SSRProvider_default = $9d939cbc98267846$export$9f8ac96af4b1b2ae;

// node_modules/react-bootstrap/esm/Stack.js
var import_classnames64 = __toESM(require_classnames());
var React93 = __toESM(require_react());

// node_modules/react-bootstrap/esm/createUtilityClasses.js
var import_prop_types8 = __toESM(require_prop_types());
function createUtilityClassName(utilityValues, breakpoints = DEFAULT_BREAKPOINTS) {
  const classes = [];
  Object.entries(utilityValues).forEach(([utilName, utilValue]) => {
    if (utilValue != null) {
      if (typeof utilValue === "object") {
        breakpoints.forEach((brkPoint) => {
          const bpValue = utilValue[brkPoint];
          if (bpValue != null) {
            const infix = brkPoint !== "xs" ? `-${brkPoint}` : "";
            classes.push(`${utilName}${infix}-${bpValue}`);
          }
        });
      } else {
        classes.push(`${utilName}-${utilValue}`);
      }
    }
  });
  return classes;
}

// node_modules/react-bootstrap/esm/Stack.js
var import_jsx_runtime95 = __toESM(require_jsx_runtime());
var Stack = React93.forwardRef((_a, ref) => {
  var _b = _a, {
    as: Component = "div",
    bsPrefix,
    className,
    direction,
    gap
  } = _b, props = __objRest(_b, [
    "as",
    "bsPrefix",
    "className",
    "direction",
    "gap"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, direction === "horizontal" ? "hstack" : "vstack");
  const breakpoints = useBootstrapBreakpoints();
  return (0, import_jsx_runtime95.jsx)(Component, __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames64.default)(className, bsPrefix, ...createUtilityClassName({
      gap,
      breakpoints
    }))
  }));
});
Stack.displayName = "Stack";
var Stack_default = Stack;

// node_modules/react-bootstrap/esm/Tab.js
var import_prop_types9 = __toESM(require_prop_types());
var React98 = __toESM(require_react());

// node_modules/react-bootstrap/esm/TabContainer.js
var React96 = __toESM(require_react());

// node_modules/@restart/ui/esm/Tabs.js
var React95 = __toESM(require_react());
var import_react54 = __toESM(require_react());

// node_modules/@restart/ui/esm/TabPanel.js
var React94 = __toESM(require_react());
var import_react53 = __toESM(require_react());

// node_modules/@restart/ui/esm/NoopTransition.js
var import_react52 = __toESM(require_react());
function NoopTransition({
  children,
  in: inProp,
  mountOnEnter,
  unmountOnExit
}) {
  const hasEnteredRef = (0, import_react52.useRef)(inProp);
  (0, import_react52.useEffect)(() => {
    if (inProp)
      hasEnteredRef.current = true;
  }, [inProp]);
  if (inProp)
    return children;
  if (unmountOnExit) {
    return null;
  }
  if (!hasEnteredRef.current && mountOnEnter) {
    return null;
  }
  return children;
}
var NoopTransition_default = NoopTransition;

// node_modules/@restart/ui/esm/TabPanel.js
var import_jsx_runtime96 = __toESM(require_jsx_runtime());
var _excluded8 = ["active", "eventKey", "mountOnEnter", "transition", "unmountOnExit", "role", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"];
var _excluded22 = ["activeKey", "getControlledId", "getControllerId"];
var _excluded32 = ["as"];
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useTabPanel(_ref) {
  let {
    active,
    eventKey,
    mountOnEnter,
    transition,
    unmountOnExit,
    role = "tabpanel",
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    onExited
  } = _ref, props = _objectWithoutPropertiesLoose8(_ref, _excluded8);
  const context6 = (0, import_react53.useContext)(TabContext_default);
  if (!context6)
    return [Object.assign({}, props, {
      role
    }), {
      eventKey,
      isActive: active,
      mountOnEnter,
      transition,
      unmountOnExit,
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited
    }];
  const {
    activeKey,
    getControlledId,
    getControllerId
  } = context6, rest = _objectWithoutPropertiesLoose8(context6, _excluded22);
  const key = makeEventKey(eventKey);
  return [Object.assign({}, props, {
    role,
    id: getControlledId(eventKey),
    "aria-labelledby": getControllerId(eventKey)
  }), {
    eventKey,
    isActive: active == null && key != null ? makeEventKey(activeKey) === key : active,
    transition: transition || rest.transition,
    mountOnEnter: mountOnEnter != null ? mountOnEnter : rest.mountOnEnter,
    unmountOnExit: unmountOnExit != null ? unmountOnExit : rest.unmountOnExit,
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    onExited
  }];
}
var TabPanel = React94.forwardRef((_ref2, ref) => {
  let {
    as: Component = "div"
  } = _ref2, props = _objectWithoutPropertiesLoose8(_ref2, _excluded32);
  const [tabPanelProps, {
    isActive,
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    onExited,
    mountOnEnter,
    unmountOnExit,
    transition: Transition = NoopTransition_default
  }] = useTabPanel(props);
  return (0, import_jsx_runtime96.jsx)(TabContext_default.Provider, {
    value: null,
    children: (0, import_jsx_runtime96.jsx)(SelectableContext_default.Provider, {
      value: null,
      children: (0, import_jsx_runtime96.jsx)(Transition, {
        in: isActive,
        onEnter,
        onEntering,
        onEntered,
        onExit,
        onExiting,
        onExited,
        mountOnEnter,
        unmountOnExit,
        children: (0, import_jsx_runtime96.jsx)(Component, Object.assign({}, tabPanelProps, {
          ref,
          hidden: !isActive,
          "aria-hidden": !isActive
        }))
      })
    })
  });
});
TabPanel.displayName = "TabPanel";
var TabPanel_default = TabPanel;

// node_modules/@restart/ui/esm/Tabs.js
var import_jsx_runtime97 = __toESM(require_jsx_runtime());
var Tabs = (props) => {
  const {
    id: userId,
    generateChildId: generateCustomChildId,
    onSelect: propsOnSelect,
    activeKey: propsActiveKey,
    defaultActiveKey,
    transition,
    mountOnEnter,
    unmountOnExit,
    children
  } = props;
  const [activeKey, onSelect] = useUncontrolledProp(propsActiveKey, defaultActiveKey, propsOnSelect);
  const id = $9d939cbc98267846$export$619500959fc48b26(userId);
  const generateChildId = (0, import_react54.useMemo)(() => generateCustomChildId || ((key, type) => id ? `${id}-${type}-${key}` : null), [id, generateCustomChildId]);
  const tabContext = (0, import_react54.useMemo)(() => ({
    onSelect,
    activeKey,
    transition,
    mountOnEnter: mountOnEnter || false,
    unmountOnExit: unmountOnExit || false,
    getControlledId: (key) => generateChildId(key, "tabpane"),
    getControllerId: (key) => generateChildId(key, "tab")
  }), [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);
  return (0, import_jsx_runtime97.jsx)(TabContext_default.Provider, {
    value: tabContext,
    children: (0, import_jsx_runtime97.jsx)(SelectableContext_default.Provider, {
      value: onSelect || null,
      children
    })
  });
};
Tabs.Panel = TabPanel_default;
var Tabs_default = Tabs;

// node_modules/react-bootstrap/esm/getTabTransitionComponent.js
function getTabTransitionComponent(transition) {
  if (typeof transition === "boolean") {
    return transition ? Fade_default : NoopTransition_default;
  }
  return transition;
}

// node_modules/react-bootstrap/esm/TabContainer.js
var import_jsx_runtime98 = __toESM(require_jsx_runtime());
var TabContainer = (_a) => {
  var _b = _a, {
    transition
  } = _b, props = __objRest(_b, [
    "transition"
  ]);
  return (0, import_jsx_runtime98.jsx)(Tabs_default, __spreadProps(__spreadValues({}, props), {
    transition: getTabTransitionComponent(transition)
  }));
};
TabContainer.displayName = "TabContainer";
var TabContainer_default = TabContainer;

// node_modules/react-bootstrap/esm/TabContent.js
var TabContent_default = createWithBsPrefix("tab-content");

// node_modules/react-bootstrap/esm/TabPane.js
var import_classnames65 = __toESM(require_classnames());
var React97 = __toESM(require_react());
var import_jsx_runtime99 = __toESM(require_jsx_runtime());
var TabPane = React97.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    transition
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "transition"
  ]);
  const [_a2, ..._b2] = useTabPanel(__spreadProps(__spreadValues({}, props), {
    transition: getTabTransitionComponent(transition)
  })), _c = _a2, {
    className,
    as: Component = "div"
  } = _c, rest = __objRest(_c, [
    "className",
    "as"
  ]), [{
    isActive,
    onEnter,
    onEntering,
    onEntered,
    onExit,
    onExiting,
    onExited,
    mountOnEnter,
    unmountOnExit,
    transition: Transition = Fade_default
  }] = _b2;
  const prefix = useBootstrapPrefix(bsPrefix, "tab-pane");
  return (0, import_jsx_runtime99.jsx)(TabContext_default.Provider, {
    value: null,
    children: (0, import_jsx_runtime99.jsx)(SelectableContext_default.Provider, {
      value: null,
      children: (0, import_jsx_runtime99.jsx)(Transition, {
        in: isActive,
        onEnter,
        onEntering,
        onEntered,
        onExit,
        onExiting,
        onExited,
        mountOnEnter,
        unmountOnExit,
        children: (0, import_jsx_runtime99.jsx)(Component, __spreadProps(__spreadValues({}, rest), {
          ref,
          className: (0, import_classnames65.default)(className, prefix, isActive && "active")
        }))
      })
    })
  });
});
TabPane.displayName = "TabPane";
var TabPane_default = TabPane;

// node_modules/react-bootstrap/esm/Tab.js
var import_jsx_runtime100 = __toESM(require_jsx_runtime());
var import_jsx_runtime101 = __toESM(require_jsx_runtime());
var propTypes7 = {
  eventKey: import_prop_types9.default.oneOfType([import_prop_types9.default.string, import_prop_types9.default.number]),
  title: import_prop_types9.default.node.isRequired,
  disabled: import_prop_types9.default.bool,
  tabClassName: import_prop_types9.default.string,
  tabAttrs: import_prop_types9.default.object
};
var Tab = () => {
  throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly");
  return (0, import_jsx_runtime101.jsx)(import_jsx_runtime100.Fragment, {});
};
Tab.propTypes = propTypes7;
var Tab_default = Object.assign(Tab, {
  Container: TabContainer_default,
  Content: TabContent_default,
  Pane: TabPane_default
});

// node_modules/react-bootstrap/esm/Table.js
var import_classnames66 = __toESM(require_classnames());
var React99 = __toESM(require_react());
var import_jsx_runtime102 = __toESM(require_jsx_runtime());
var Table = React99.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    striped,
    bordered,
    borderless,
    hover,
    size: size2,
    variant,
    responsive
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "striped",
    "bordered",
    "borderless",
    "hover",
    "size",
    "variant",
    "responsive"
  ]);
  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, "table");
  const classes = (0, import_classnames66.default)(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size2 && `${decoratedBsPrefix}-${size2}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);
  const table = (0, import_jsx_runtime102.jsx)("table", __spreadProps(__spreadValues({}, props), {
    className: classes,
    ref
  }));
  if (responsive) {
    let responsiveClass = `${decoratedBsPrefix}-responsive`;
    if (typeof responsive === "string") {
      responsiveClass = `${responsiveClass}-${responsive}`;
    }
    return (0, import_jsx_runtime102.jsx)("div", {
      className: responsiveClass,
      children: table
    });
  }
  return table;
});
var Table_default = Table;

// node_modules/react-bootstrap/esm/Tabs.js
var React100 = __toESM(require_react());
var import_jsx_runtime103 = __toESM(require_jsx_runtime());
var import_jsx_runtime104 = __toESM(require_jsx_runtime());
var defaultProps33 = {
  variant: "tabs",
  mountOnEnter: false,
  unmountOnExit: false
};
function getDefaultActiveKey(children) {
  let defaultActiveKey;
  forEach(children, (child) => {
    if (defaultActiveKey == null) {
      defaultActiveKey = child.props.eventKey;
    }
  });
  return defaultActiveKey;
}
function renderTab(child) {
  const {
    title,
    eventKey,
    disabled,
    tabClassName,
    tabAttrs,
    id
  } = child.props;
  if (title == null) {
    return null;
  }
  return (0, import_jsx_runtime103.jsx)(NavItem_default2, {
    as: "li",
    role: "presentation",
    children: (0, import_jsx_runtime103.jsx)(NavLink_default, __spreadProps(__spreadValues({
      as: "button",
      type: "button",
      eventKey,
      disabled,
      id,
      className: tabClassName
    }, tabAttrs), {
      children: title
    }))
  });
}
var Tabs2 = (props) => {
  const _a = useUncontrolled(props, {
    activeKey: "onSelect"
  }), {
    id,
    onSelect,
    transition,
    mountOnEnter,
    unmountOnExit,
    children,
    activeKey = getDefaultActiveKey(children)
  } = _a, controlledProps = __objRest(_a, [
    "id",
    "onSelect",
    "transition",
    "mountOnEnter",
    "unmountOnExit",
    "children",
    "activeKey"
  ]);
  return (0, import_jsx_runtime104.jsxs)(Tabs_default, {
    id,
    activeKey,
    onSelect,
    transition: getTabTransitionComponent(transition),
    mountOnEnter,
    unmountOnExit,
    children: [(0, import_jsx_runtime103.jsx)(Nav_default2, __spreadProps(__spreadValues({}, controlledProps), {
      role: "tablist",
      as: "ul",
      children: map(children, renderTab)
    })), (0, import_jsx_runtime103.jsx)(TabContent_default, {
      children: map(children, (child) => {
        const childProps = __spreadValues({}, child.props);
        delete childProps.title;
        delete childProps.disabled;
        delete childProps.tabClassName;
        delete childProps.tabAttrs;
        return (0, import_jsx_runtime103.jsx)(TabPane_default, __spreadValues({}, childProps));
      })
    })]
  });
};
Tabs2.defaultProps = defaultProps33;
Tabs2.displayName = "Tabs";
var Tabs_default2 = Tabs2;

// node_modules/react-bootstrap/esm/Toast.js
var React104 = __toESM(require_react());
var import_react56 = __toESM(require_react());
var import_classnames68 = __toESM(require_classnames());

// node_modules/react-bootstrap/esm/ToastFade.js
var React101 = __toESM(require_react());
var import_jsx_runtime105 = __toESM(require_jsx_runtime());
var fadeStyles = {
  [ENTERING]: "showing",
  [EXITING]: "showing show"
};
var ToastFade = React101.forwardRef((props, ref) => (0, import_jsx_runtime105.jsx)(Fade_default, __spreadProps(__spreadValues({}, props), {
  ref,
  transitionClasses: fadeStyles
})));
ToastFade.displayName = "ToastFade";
var ToastFade_default = ToastFade;

// node_modules/react-bootstrap/esm/ToastHeader.js
var import_classnames67 = __toESM(require_classnames());
var React103 = __toESM(require_react());
var import_react55 = __toESM(require_react());

// node_modules/react-bootstrap/esm/ToastContext.js
var React102 = __toESM(require_react());
var ToastContext = React102.createContext({
  onClose() {
  }
});
var ToastContext_default = ToastContext;

// node_modules/react-bootstrap/esm/ToastHeader.js
var import_jsx_runtime106 = __toESM(require_jsx_runtime());
var import_jsx_runtime107 = __toESM(require_jsx_runtime());
var defaultProps34 = {
  closeLabel: "Close",
  closeButton: true
};
var ToastHeader = React103.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    closeLabel,
    closeVariant,
    closeButton,
    className,
    children
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "closeLabel",
    "closeVariant",
    "closeButton",
    "className",
    "children"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "toast-header");
  const context6 = (0, import_react55.useContext)(ToastContext_default);
  const handleClick = useEventCallback((e) => {
    context6 == null ? void 0 : context6.onClose == null ? void 0 : context6.onClose(e);
  });
  return (0, import_jsx_runtime107.jsxs)("div", __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames67.default)(bsPrefix, className),
    children: [children, closeButton && (0, import_jsx_runtime106.jsx)(CloseButton_default, {
      "aria-label": closeLabel,
      variant: closeVariant,
      onClick: handleClick,
      "data-dismiss": "toast"
    })]
  }));
});
ToastHeader.displayName = "ToastHeader";
ToastHeader.defaultProps = defaultProps34;
var ToastHeader_default = ToastHeader;

// node_modules/react-bootstrap/esm/ToastBody.js
var ToastBody_default = createWithBsPrefix("toast-body");

// node_modules/react-bootstrap/esm/Toast.js
var import_jsx_runtime108 = __toESM(require_jsx_runtime());
var Toast = React104.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    className,
    transition: Transition = ToastFade_default,
    show = true,
    animation = true,
    delay = 5e3,
    autohide = false,
    onClose,
    bg
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "className",
    "transition",
    "show",
    "animation",
    "delay",
    "autohide",
    "onClose",
    "bg"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "toast");
  const delayRef = (0, import_react56.useRef)(delay);
  const onCloseRef = (0, import_react56.useRef)(onClose);
  (0, import_react56.useEffect)(() => {
    delayRef.current = delay;
    onCloseRef.current = onClose;
  }, [delay, onClose]);
  const autohideTimeout = useTimeout();
  const autohideToast = !!(autohide && show);
  const autohideFunc = (0, import_react56.useCallback)(() => {
    if (autohideToast) {
      onCloseRef.current == null ? void 0 : onCloseRef.current();
    }
  }, [autohideToast]);
  (0, import_react56.useEffect)(() => {
    autohideTimeout.set(autohideFunc, delayRef.current);
  }, [autohideTimeout, autohideFunc]);
  const toastContext = (0, import_react56.useMemo)(() => ({
    onClose
  }), [onClose]);
  const hasAnimation = !!(Transition && animation);
  const toast = (0, import_jsx_runtime108.jsx)("div", __spreadProps(__spreadValues({}, props), {
    ref,
    className: (0, import_classnames68.default)(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? "show" : "hide")),
    role: "alert",
    "aria-live": "assertive",
    "aria-atomic": "true"
  }));
  return (0, import_jsx_runtime108.jsx)(ToastContext_default.Provider, {
    value: toastContext,
    children: hasAnimation && Transition ? (0, import_jsx_runtime108.jsx)(Transition, {
      in: show,
      unmountOnExit: true,
      children: toast
    }) : toast
  });
});
Toast.displayName = "Toast";
var Toast_default = Object.assign(Toast, {
  Body: ToastBody_default,
  Header: ToastHeader_default
});

// node_modules/react-bootstrap/esm/ToastContainer.js
var import_classnames69 = __toESM(require_classnames());
var React105 = __toESM(require_react());
var import_jsx_runtime109 = __toESM(require_jsx_runtime());
var positionClasses = {
  "top-start": "top-0 start-0",
  "top-center": "top-0 start-50 translate-middle-x",
  "top-end": "top-0 end-0",
  "middle-start": "top-50 start-0 translate-middle-y",
  "middle-center": "top-50 start-50 translate-middle",
  "middle-end": "top-50 end-0 translate-middle-y",
  "bottom-start": "bottom-0 start-0",
  "bottom-center": "bottom-0 start-50 translate-middle-x",
  "bottom-end": "bottom-0 end-0"
};
var ToastContainer = React105.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    position,
    containerPosition = "absolute",
    className,
    as: Component = "div"
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "position",
    "containerPosition",
    "className",
    "as"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "toast-container");
  return (0, import_jsx_runtime109.jsx)(Component, __spreadProps(__spreadValues({
    ref
  }, props), {
    className: (0, import_classnames69.default)(bsPrefix, position && [containerPosition ? `position-${containerPosition}` : null, positionClasses[position]], className)
  }));
});
ToastContainer.displayName = "ToastContainer";
var ToastContainer_default = ToastContainer;

// node_modules/react-bootstrap/esm/ToggleButton.js
var import_classnames70 = __toESM(require_classnames());
var React106 = __toESM(require_react());
var import_jsx_runtime110 = __toESM(require_jsx_runtime());
var import_jsx_runtime111 = __toESM(require_jsx_runtime());
var import_jsx_runtime112 = __toESM(require_jsx_runtime());
var noop4 = () => void 0;
var ToggleButton = React106.forwardRef((_a, ref) => {
  var _b = _a, {
    bsPrefix,
    name,
    className,
    checked,
    type,
    onChange,
    value,
    disabled,
    id,
    inputRef
  } = _b, props = __objRest(_b, [
    "bsPrefix",
    "name",
    "className",
    "checked",
    "type",
    "onChange",
    "value",
    "disabled",
    "id",
    "inputRef"
  ]);
  bsPrefix = useBootstrapPrefix(bsPrefix, "btn-check");
  return (0, import_jsx_runtime112.jsxs)(import_jsx_runtime111.Fragment, {
    children: [(0, import_jsx_runtime110.jsx)("input", {
      className: bsPrefix,
      name,
      type,
      value,
      ref: inputRef,
      autoComplete: "off",
      checked: !!checked,
      disabled: !!disabled,
      onChange: onChange || noop4,
      id
    }), (0, import_jsx_runtime110.jsx)(Button_default2, __spreadProps(__spreadValues({}, props), {
      ref,
      className: (0, import_classnames70.default)(className, disabled && "disabled"),
      type: void 0,
      role: void 0,
      as: "label",
      htmlFor: id
    }))]
  });
});
ToggleButton.displayName = "ToggleButton";
var ToggleButton_default = ToggleButton;

// node_modules/react-bootstrap/esm/ToggleButtonGroup.js
var React107 = __toESM(require_react());
var import_invariant2 = __toESM(require_browser());
var import_jsx_runtime113 = __toESM(require_jsx_runtime());
var defaultProps35 = {
  type: "radio",
  vertical: false
};
var ToggleButtonGroup = React107.forwardRef((props, ref) => {
  const _a = useUncontrolled(props, {
    value: "onChange"
  }), {
    children,
    type,
    name,
    value,
    onChange
  } = _a, controlledProps = __objRest(_a, [
    "children",
    "type",
    "name",
    "value",
    "onChange"
  ]);
  const getValues = () => value == null ? [] : [].concat(value);
  const handleToggle = (inputVal, event) => {
    if (!onChange) {
      return;
    }
    const values = getValues();
    const isActive = values.indexOf(inputVal) !== -1;
    if (type === "radio") {
      if (!isActive && onChange)
        onChange(inputVal, event);
      return;
    }
    if (isActive) {
      onChange(values.filter((n) => n !== inputVal), event);
    } else {
      onChange([...values, inputVal], event);
    }
  };
  !(type !== "radio" || !!name) ? true ? (0, import_invariant2.default)(false, 'A `name` is required to group the toggle buttons when the `type` is set to "radio"') : (0, import_invariant2.default)(false) : void 0;
  return (0, import_jsx_runtime113.jsx)(ButtonGroup_default, __spreadProps(__spreadValues({}, controlledProps), {
    ref,
    children: map(children, (child) => {
      const values = getValues();
      const {
        value: childVal,
        onChange: childOnChange
      } = child.props;
      const handler = (e) => handleToggle(childVal, e);
      return React107.cloneElement(child, {
        type,
        name: child.name || name,
        checked: values.indexOf(childVal) !== -1,
        onChange: createChainedFunction_default(childOnChange, handler)
      });
    })
  }));
});
ToggleButtonGroup.defaultProps = defaultProps35;
var ToggleButtonGroup_default = Object.assign(ToggleButtonGroup, {
  Button: ToggleButton_default
});
export {
  Accordion_default as Accordion,
  AccordionButton_default as AccordionButton,
  AccordionCollapse_default as AccordionCollapse,
  AccordionContext_default as AccordionContext,
  Alert_default as Alert,
  Anchor_default2 as Anchor,
  Badge_default as Badge,
  Breadcrumb_default as Breadcrumb,
  BreadcrumbItem_default as BreadcrumbItem,
  Button_default2 as Button,
  ButtonGroup_default as ButtonGroup,
  ButtonToolbar_default as ButtonToolbar,
  Card_default as Card,
  CardGroup_default as CardGroup,
  CardImg_default as CardImg,
  Carousel_default as Carousel,
  CarouselItem_default as CarouselItem,
  CloseButton_default as CloseButton,
  Col_default as Col,
  Collapse_default as Collapse,
  Container_default as Container,
  Dropdown_default2 as Dropdown,
  DropdownButton_default as DropdownButton,
  Fade_default as Fade,
  Figure_default as Figure,
  FloatingLabel_default as FloatingLabel,
  Form_default as Form,
  FormCheck_default as FormCheck,
  FormControl_default as FormControl,
  FormFloating_default as FormFloating,
  FormGroup_default as FormGroup,
  FormLabel_default as FormLabel,
  FormSelect_default as FormSelect,
  FormText_default as FormText,
  Image_default as Image,
  InputGroup_default as InputGroup,
  ListGroup_default as ListGroup,
  ListGroupItem_default as ListGroupItem,
  Modal_default2 as Modal,
  ModalBody_default as ModalBody,
  ModalDialog_default as ModalDialog,
  ModalFooter_default as ModalFooter,
  ModalHeader_default as ModalHeader,
  ModalTitle_default as ModalTitle,
  Nav_default2 as Nav,
  NavDropdown_default as NavDropdown,
  NavItem_default2 as NavItem,
  NavLink_default as NavLink,
  Navbar_default as Navbar,
  NavbarBrand_default as NavbarBrand,
  Offcanvas_default as Offcanvas,
  OffcanvasBody_default as OffcanvasBody,
  OffcanvasHeader_default as OffcanvasHeader,
  OffcanvasTitle_default as OffcanvasTitle,
  Overlay_default as Overlay,
  OverlayTrigger_default as OverlayTrigger,
  PageItem_default as PageItem,
  Pagination_default as Pagination,
  Placeholder_default as Placeholder,
  PlaceholderButton_default as PlaceholderButton,
  Popover_default as Popover,
  PopoverBody_default as PopoverBody,
  PopoverHeader_default as PopoverHeader,
  ProgressBar_default as ProgressBar,
  Ratio_default as Ratio,
  Row_default as Row,
  SSRProvider_default as SSRProvider,
  Spinner_default as Spinner,
  SplitButton_default as SplitButton,
  Stack_default as Stack,
  Tab_default as Tab,
  TabContainer_default as TabContainer,
  TabContent_default as TabContent,
  TabPane_default as TabPane,
  Table_default as Table,
  Tabs_default2 as Tabs,
  ThemeProvider_default as ThemeProvider,
  Toast_default as Toast,
  ToastBody_default as ToastBody,
  ToastContainer_default as ToastContainer,
  ToastHeader_default as ToastHeader,
  ToggleButton_default as ToggleButton,
  ToggleButtonGroup_default as ToggleButtonGroup,
  Tooltip_default as Tooltip,
  useAccordionButton
};
//# sourceMappingURL=react-bootstrap.js.map
