{
  "version": 3,
  "sources": ["../../react-chartjs-2/src/utils.ts", "../../react-chartjs-2/src/chart.tsx", "../../react-chartjs-2/src/typedCharts.tsx"],
  "sourcesContent": ["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n", "import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props as ChartProps;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n", "import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],
  "mappings": "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",
  "names": []
}
